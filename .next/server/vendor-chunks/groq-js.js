"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/groq-js";
exports.ids = ["vendor-chunks/groq-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/groq-js/dist/1.mjs":
/*!*****************************************!*\
  !*** ./node_modules/groq-js/dist/1.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   createReferenceTypeNode: () => (/* binding */ createReferenceTypeNode),\n/* harmony export */   evaluate: () => (/* binding */ evaluateQuery),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   typeEvaluate: () => (/* binding */ typeEvaluate)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n\nvar __defProp$6 = Object.defineProperty, __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$6 = (obj, key, value) => __defNormalProp$6(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction pathRegExp(pattern) {\n  const re = [];\n  for (const part of pattern.split(\".\"))\n    part === \"*\" ? re.push(\"[^.]+\") : part === \"**\" ? re.push(\".*\") : re.push(escapeRegExp(part));\n  return new RegExp(`^${re.join(\".\")}$`);\n}\nclass Path {\n  constructor(pattern) {\n    __publicField$6(this, \"pattern\"), __publicField$6(this, \"patternRe\"), this.pattern = pattern, this.patternRe = pathRegExp(pattern);\n  }\n  matches(str) {\n    return this.patternRe.test(str);\n  }\n  toJSON() {\n    return this.pattern;\n  }\n}\nvar __defProp$5 = Object.defineProperty, __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$5 = (obj, key, value) => __defNormalProp$5(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass StreamValue {\n  constructor(generator) {\n    __publicField$5(this, \"type\", \"stream\"), __publicField$5(this, \"generator\"), __publicField$5(this, \"ticker\"), __publicField$5(this, \"isDone\"), __publicField$5(this, \"data\"), this.generator = generator, this.ticker = null, this.isDone = !1, this.data = [];\n  }\n  // eslint-disable-next-line class-methods-use-this\n  isArray() {\n    return !0;\n  }\n  async get() {\n    const result = [];\n    for await (const value of this)\n      result.push(await value.get());\n    return result;\n  }\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    for (; ; ) {\n      for (; i < this.data.length; i++)\n        yield this.data[i];\n      if (this.isDone)\n        return;\n      await this._nextTick();\n    }\n  }\n  _nextTick() {\n    if (this.ticker)\n      return this.ticker;\n    let currentResolver;\n    const setupTicker = () => {\n      this.ticker = new Promise((resolve) => {\n        currentResolver = resolve;\n      });\n    }, tick = () => {\n      currentResolver(), setupTicker();\n    }, fetch = async () => {\n      for await (const value of this.generator())\n        this.data.push(value), tick();\n      this.isDone = !0, tick();\n    };\n    return setupTicker(), fetch(), this.ticker;\n  }\n}\nconst RFC3339_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([-+]\\d{2}:\\d{2}))$/;\nfunction parseRFC3339(str) {\n  return RFC3339_REGEX.test(str) ? new Date(str) : null;\n}\nfunction formatRFC3339(d) {\n  const year = addLeadingZero(d.getUTCFullYear(), 4), month = addLeadingZero(d.getUTCMonth() + 1, 2), day = addLeadingZero(d.getUTCDate(), 2), hour = addLeadingZero(d.getUTCHours(), 2), minute = addLeadingZero(d.getUTCMinutes(), 2), second = addLeadingZero(d.getUTCSeconds(), 2);\n  let fractionalSecond = \"\";\n  const millis = d.getMilliseconds();\n  return millis != 0 && (fractionalSecond = `.${addLeadingZero(millis, 3)}`), `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}Z`;\n}\nfunction addLeadingZero(num, targetLength) {\n  let str = num.toString();\n  for (; str.length < targetLength; )\n    str = `0${str}`;\n  return str;\n}\nvar __defProp$4 = Object.defineProperty, __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$4 = (obj, key, value) => __defNormalProp$4(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass StaticValue {\n  constructor(data, type) {\n    __publicField$4(this, \"data\"), __publicField$4(this, \"type\"), this.data = data, this.type = type;\n  }\n  isArray() {\n    return this.type === \"array\";\n  }\n  // eslint-disable-next-line require-await\n  async get() {\n    return this.data;\n  }\n  [Symbol.asyncIterator]() {\n    if (Array.isArray(this.data))\n      return function* (data) {\n        for (const element of data)\n          yield fromJS(element);\n      }(this.data);\n    throw new Error(`Cannot iterate over: ${this.type}`);\n  }\n}\nconst NULL_VALUE = new StaticValue(null, \"null\"), TRUE_VALUE = new StaticValue(!0, \"boolean\"), FALSE_VALUE = new StaticValue(!1, \"boolean\");\nclass DateTime {\n  constructor(date) {\n    __publicField$4(this, \"date\"), this.date = date;\n  }\n  static parseToValue(str) {\n    const date = parseRFC3339(str);\n    return date ? new StaticValue(new DateTime(date), \"datetime\") : NULL_VALUE;\n  }\n  equals(other) {\n    return this.date.getTime() == other.date.getTime();\n  }\n  add(secs) {\n    const copy = new Date(this.date.getTime());\n    return copy.setTime(copy.getTime() + secs * 1e3), new DateTime(copy);\n  }\n  difference(other) {\n    return (this.date.getTime() - other.date.getTime()) / 1e3;\n  }\n  compareTo(other) {\n    return this.date.getTime() - other.date.getTime();\n  }\n  toString() {\n    return formatRFC3339(this.date);\n  }\n  toJSON() {\n    return this.toString();\n  }\n}\nfunction fromNumber(num) {\n  return Number.isFinite(num) ? new StaticValue(num, \"number\") : NULL_VALUE;\n}\nfunction fromString(str) {\n  return new StaticValue(str, \"string\");\n}\nfunction fromDateTime(dt) {\n  return new StaticValue(dt, \"datetime\");\n}\nfunction fromPath(path) {\n  return new StaticValue(path, \"path\");\n}\nfunction isIterator(obj) {\n  return obj && typeof obj.next == \"function\";\n}\nfunction fromJS(val) {\n  return isIterator(val) ? new StreamValue(async function* () {\n    for await (const value of val)\n      yield fromJS(value);\n  }) : val == null ? NULL_VALUE : new StaticValue(val, getType(val));\n}\nfunction getType(data) {\n  return data === null || typeof data > \"u\" ? \"null\" : Array.isArray(data) ? \"array\" : data instanceof Path ? \"path\" : data instanceof DateTime ? \"datetime\" : typeof data;\n}\nfunction isEqual(a, b) {\n  return a.type === \"string\" && b.type === \"string\" || a.type === \"boolean\" && b.type === \"boolean\" || a.type === \"null\" && b.type === \"null\" || a.type === \"number\" && b.type === \"number\" ? a.data === b.data : a.type === \"datetime\" && b.type === \"datetime\" ? a.data.equals(b.data) : !1;\n}\nconst CHARS = /([^!@#$%^&*(),\\\\/?\";:{}|[\\]+<>\\s-])+/g, CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\\\/?\";:{}|[\\]+<>\\s-])+/g, EDGE_CHARS = /(\\b\\.+|\\.+\\b)/g;\nfunction matchText(tokens, patterns) {\n  return tokens.length === 0 || patterns.length === 0 ? !1 : patterns.every((pattern) => pattern(tokens));\n}\nfunction matchTokenize(text) {\n  return text.replace(EDGE_CHARS, \"\").match(CHARS) || [];\n}\nfunction matchAnalyzePattern(text) {\n  return matchPatternRegex(text).map((re) => (tokens) => tokens.some((token) => re.test(token)));\n}\nfunction matchPatternRegex(text) {\n  return (text.replace(EDGE_CHARS, \"\").match(CHARS_WITH_WILDCARD) || []).map(\n    (term) => new RegExp(`^${term.slice(0, 1024).replace(/\\*/g, \".*\")}$`, \"i\")\n  );\n}\nasync function gatherText(value, cb) {\n  if (value.type === \"string\")\n    return cb(value.data), !0;\n  if (value.isArray()) {\n    let success = !0;\n    for await (const part of value)\n      part.type === \"string\" ? cb(part.data) : success = !1;\n    return success;\n  }\n  return !1;\n}\nconst TYPE_ORDER = {\n  datetime: 1,\n  number: 2,\n  string: 3,\n  boolean: 4\n};\nfunction partialCompare(a, b) {\n  const aType = getType(a), bType = getType(b);\n  if (aType !== bType)\n    return null;\n  switch (aType) {\n    case \"number\":\n    case \"boolean\":\n      return a - b;\n    case \"string\":\n      return a < b ? -1 : a > b ? 1 : 0;\n    case \"datetime\":\n      return a.compareTo(b);\n    default:\n      return null;\n  }\n}\nfunction totalCompare(a, b) {\n  const aType = getType(a), bType = getType(b), aTypeOrder = TYPE_ORDER[aType] || 100, bTypeOrder = TYPE_ORDER[bType] || 100;\n  if (aTypeOrder !== bTypeOrder)\n    return aTypeOrder - bTypeOrder;\n  let result = partialCompare(a, b);\n  return result === null && (result = 0), result;\n}\nconst operators = {\n  \"==\": function(left, right) {\n    return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;\n  },\n  \"!=\": function(left, right) {\n    return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;\n  },\n  \">\": function(left, right) {\n    if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n    const result = partialCompare(left.data, right.data);\n    return result === null ? NULL_VALUE : result > 0 ? TRUE_VALUE : FALSE_VALUE;\n  },\n  \">=\": function(left, right) {\n    if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n    const result = partialCompare(left.data, right.data);\n    return result === null ? NULL_VALUE : result >= 0 ? TRUE_VALUE : FALSE_VALUE;\n  },\n  \"<\": function(left, right) {\n    if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n    const result = partialCompare(left.data, right.data);\n    return result === null ? NULL_VALUE : result < 0 ? TRUE_VALUE : FALSE_VALUE;\n  },\n  \"<=\": function(left, right) {\n    if (left.type === \"stream\" || right.type === \"stream\") return NULL_VALUE;\n    const result = partialCompare(left.data, right.data);\n    return result === null ? NULL_VALUE : result <= 0 ? TRUE_VALUE : FALSE_VALUE;\n  },\n  // eslint-disable-next-line func-name-matching\n  in: async function(left, right) {\n    if (right.type === \"path\")\n      return left.type !== \"string\" ? NULL_VALUE : right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;\n    if (right.isArray()) {\n      for await (const b of right)\n        if (isEqual(left, b))\n          return TRUE_VALUE;\n      return FALSE_VALUE;\n    }\n    return NULL_VALUE;\n  },\n  match: async function(left, right) {\n    let tokens = [], patterns = [];\n    return await gatherText(left, (part) => {\n      tokens = tokens.concat(matchTokenize(part));\n    }), await gatherText(right, (part) => {\n      patterns = patterns.concat(matchAnalyzePattern(part));\n    }) && matchText(tokens, patterns) ? TRUE_VALUE : FALSE_VALUE;\n  },\n  \"+\": function(left, right) {\n    return left.type === \"datetime\" && right.type === \"number\" ? fromDateTime(left.data.add(right.data)) : left.type === \"number\" && right.type === \"number\" ? fromNumber(left.data + right.data) : left.type === \"string\" && right.type === \"string\" ? fromString(left.data + right.data) : left.type === \"object\" && right.type === \"object\" ? fromJS({ ...left.data, ...right.data }) : left.type === \"array\" && right.type === \"array\" ? fromJS(left.data.concat(right.data)) : left.isArray() && right.isArray() ? new StreamValue(async function* () {\n      for await (const val of left)\n        yield val;\n      for await (const val of right)\n        yield val;\n    }) : NULL_VALUE;\n  },\n  \"-\": function(left, right) {\n    return left.type === \"datetime\" && right.type === \"number\" ? fromDateTime(left.data.add(-right.data)) : left.type === \"datetime\" && right.type === \"datetime\" ? fromNumber(left.data.difference(right.data)) : left.type === \"number\" && right.type === \"number\" ? fromNumber(left.data - right.data) : NULL_VALUE;\n  },\n  \"*\": numericOperator((a, b) => a * b),\n  \"/\": numericOperator((a, b) => a / b),\n  \"%\": numericOperator((a, b) => a % b),\n  \"**\": numericOperator((a, b) => Math.pow(a, b))\n};\nfunction numericOperator(impl) {\n  return function(left, right) {\n    if (left.type === \"number\" && right.type === \"number\") {\n      const result = impl(left.data, right.data);\n      return fromNumber(result);\n    }\n    return NULL_VALUE;\n  };\n}\nvar __defProp$3 = Object.defineProperty, __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$3 = (obj, key, value) => __defNormalProp$3(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nlet Scope$1 = class Scope {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(params, source, value, context, parent) {\n    __publicField$3(this, \"params\"), __publicField$3(this, \"source\"), __publicField$3(this, \"value\"), __publicField$3(this, \"parent\"), __publicField$3(this, \"context\"), __publicField$3(this, \"isHidden\", !1), this.params = params, this.source = source, this.value = value, this.context = context, this.parent = parent;\n  }\n  createNested(value) {\n    return this.isHidden ? new Scope(this.params, this.source, value, this.context, this.parent) : new Scope(this.params, this.source, value, this.context, this);\n  }\n  createHidden(value) {\n    const result = this.createNested(value);\n    return result.isHidden = !0, result;\n  }\n};\nfunction evaluate(node, scope, execute = evaluate) {\n  const func = EXECUTORS[node.type];\n  return func(node, scope, execute);\n}\nfunction promiselessApply(value, cb) {\n  return \"then\" in value ? value.then(cb) : cb(value);\n}\nconst EXECUTORS = {\n  This(_, scope) {\n    return scope.value;\n  },\n  Selector() {\n    throw new Error(\"Selectors can not be evaluated\");\n  },\n  Everything(_, scope) {\n    return scope.source;\n  },\n  Parameter({ name }, scope) {\n    return fromJS(scope.params[name]);\n  },\n  Context({ key }, scope) {\n    if (key === \"before\" || key === \"after\")\n      return scope.context[key] || NULL_VALUE;\n    throw new Error(`unknown context key: ${key}`);\n  },\n  Parent({ n }, scope) {\n    let current = scope;\n    for (let i = 0; i < n; i++) {\n      if (!current.parent)\n        return NULL_VALUE;\n      current = current.parent;\n    }\n    return current.value;\n  },\n  OpCall({ op, left, right }, scope, execute) {\n    const func = operators[op];\n    if (!func)\n      throw new Error(`Unknown operator: ${op}`);\n    const leftValue = execute(left, scope), rightValue = execute(right, scope);\n    return \"then\" in leftValue || \"then\" in rightValue ? (async () => func(await leftValue, await rightValue))() : func(leftValue, rightValue);\n  },\n  async Select({ alternatives, fallback }, scope, execute) {\n    for (const alt of alternatives) {\n      const altCond = await execute(alt.condition, scope);\n      if (altCond.type === \"boolean\" && altCond.data === !0)\n        return execute(alt.value, scope);\n    }\n    return fallback ? execute(fallback, scope) : NULL_VALUE;\n  },\n  async InRange({ base, left, right, isInclusive }, scope, execute) {\n    const value = await execute(base, scope), leftValue = await execute(left, scope), rightValue = await execute(right, scope), leftCmp = partialCompare(await value.get(), await leftValue.get());\n    if (leftCmp === null)\n      return NULL_VALUE;\n    const rightCmp = partialCompare(await value.get(), await rightValue.get());\n    return rightCmp === null ? NULL_VALUE : isInclusive ? leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE : leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;\n  },\n  async Filter({ base, expr }, scope, execute) {\n    const baseValue = await execute(base, scope);\n    return baseValue.isArray() ? new StreamValue(async function* () {\n      for await (const elem of baseValue) {\n        const newScope = scope.createNested(elem), exprValue = await execute(expr, newScope);\n        exprValue.type === \"boolean\" && exprValue.data === !0 && (yield elem);\n      }\n    }) : NULL_VALUE;\n  },\n  async Projection({ base, expr }, scope, execute) {\n    const baseValue = await execute(base, scope);\n    if (baseValue.type !== \"object\")\n      return NULL_VALUE;\n    const newScope = scope.createNested(baseValue);\n    return execute(expr, newScope);\n  },\n  FuncCall({ func, args }, scope, execute) {\n    return func(args, scope, execute);\n  },\n  async PipeFuncCall({ func, base, args }, scope, execute) {\n    const baseValue = await execute(base, scope);\n    return func(baseValue, args, scope, execute);\n  },\n  async AccessAttribute({ base, name }, scope, execute) {\n    let value = scope.value;\n    return base && (value = await execute(base, scope)), value.type === \"object\" && value.data.hasOwnProperty(name) ? fromJS(value.data[name]) : NULL_VALUE;\n  },\n  async AccessElement({ base, index }, scope, execute) {\n    const baseValue = await execute(base, scope);\n    if (!baseValue.isArray())\n      return NULL_VALUE;\n    const data = await baseValue.get(), finalIndex = index < 0 ? index + data.length : index;\n    return fromJS(data[finalIndex]);\n  },\n  async Slice({ base, left, right, isInclusive }, scope, execute) {\n    const baseValue = await execute(base, scope);\n    if (!baseValue.isArray())\n      return NULL_VALUE;\n    const array2 = await baseValue.get();\n    let leftIdx = left, rightIdx = right;\n    return leftIdx < 0 && (leftIdx = array2.length + leftIdx), rightIdx < 0 && (rightIdx = array2.length + rightIdx), isInclusive && rightIdx++, leftIdx < 0 && (leftIdx = 0), rightIdx < 0 && (rightIdx = 0), fromJS(array2.slice(leftIdx, rightIdx));\n  },\n  async Deref({ base }, scope, execute) {\n    const value = await execute(base, scope);\n    if (!scope.source.isArray() || value.type !== \"object\")\n      return NULL_VALUE;\n    const id = value.data._ref;\n    if (typeof id != \"string\")\n      return NULL_VALUE;\n    if (scope.context.dereference)\n      return fromJS(await scope.context.dereference({ _ref: id }));\n    for await (const doc of scope.source)\n      if (doc.type === \"object\" && id === doc.data._id)\n        return doc;\n    return NULL_VALUE;\n  },\n  Value({ value }) {\n    return fromJS(value);\n  },\n  Group({ base }, scope, execute) {\n    return execute(base, scope);\n  },\n  async Object({ attributes }, scope, execute) {\n    const result = {};\n    for (const attr of attributes) {\n      const attrType = attr.type;\n      switch (attr.type) {\n        case \"ObjectAttributeValue\": {\n          const value = await execute(attr.value, scope);\n          result[attr.name] = await value.get();\n          break;\n        }\n        case \"ObjectConditionalSplat\": {\n          const cond = await execute(attr.condition, scope);\n          if (cond.type !== \"boolean\" || cond.data === !1)\n            continue;\n          const value = await execute(attr.value, scope);\n          value.type === \"object\" && Object.assign(result, value.data);\n          break;\n        }\n        case \"ObjectSplat\": {\n          const value = await execute(attr.value, scope);\n          value.type === \"object\" && Object.assign(result, value.data);\n          break;\n        }\n        default:\n          throw new Error(`Unknown node type: ${attrType}`);\n      }\n    }\n    return fromJS(result);\n  },\n  Array({ elements }, scope, execute) {\n    return new StreamValue(async function* () {\n      for (const element of elements) {\n        const value = await execute(element.value, scope);\n        if (element.isSplat) {\n          if (value.isArray())\n            for await (const v of value)\n              yield v;\n        } else\n          yield value;\n      }\n    });\n  },\n  Tuple() {\n    throw new Error(\"tuples can not be evaluated\");\n  },\n  async Or({ left, right }, scope, execute) {\n    const leftValue = await execute(left, scope), rightValue = await execute(right, scope);\n    return leftValue.type === \"boolean\" && leftValue.data === !0 || rightValue.type === \"boolean\" && rightValue.data === !0 ? TRUE_VALUE : leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\" ? NULL_VALUE : FALSE_VALUE;\n  },\n  async And({ left, right }, scope, execute) {\n    const leftValue = await execute(left, scope), rightValue = await execute(right, scope);\n    return leftValue.type === \"boolean\" && leftValue.data === !1 || rightValue.type === \"boolean\" && rightValue.data === !1 ? FALSE_VALUE : leftValue.type !== \"boolean\" || rightValue.type !== \"boolean\" ? NULL_VALUE : TRUE_VALUE;\n  },\n  async Not({ base }, scope, execute) {\n    const value = await execute(base, scope);\n    return value.type !== \"boolean\" ? NULL_VALUE : value.data ? FALSE_VALUE : TRUE_VALUE;\n  },\n  Neg({ base }, scope, execute) {\n    return promiselessApply(execute(base, scope), (value) => value.type !== \"number\" ? NULL_VALUE : fromNumber(-value.data));\n  },\n  Pos({ base }, scope, execute) {\n    return promiselessApply(execute(base, scope), (value) => value.type !== \"number\" ? NULL_VALUE : fromNumber(value.data));\n  },\n  Asc() {\n    return NULL_VALUE;\n  },\n  Desc() {\n    return NULL_VALUE;\n  },\n  async ArrayCoerce({ base }, scope, execute) {\n    const value = await execute(base, scope);\n    return value.isArray() ? value : NULL_VALUE;\n  },\n  async Map({ base, expr }, scope, execute) {\n    const value = await execute(base, scope);\n    return value.isArray() ? new StreamValue(async function* () {\n      for await (const elem of value) {\n        const newScope = scope.createHidden(elem);\n        yield await execute(expr, newScope);\n      }\n    }) : NULL_VALUE;\n  },\n  async FlatMap({ base, expr }, scope, execute) {\n    const value = await execute(base, scope);\n    return value.isArray() ? new StreamValue(async function* () {\n      for await (const elem of value) {\n        const newScope = scope.createHidden(elem), innerValue = await execute(expr, newScope);\n        if (innerValue.isArray())\n          for await (const inner of innerValue)\n            yield inner;\n        else\n          yield innerValue;\n      }\n    }) : NULL_VALUE;\n  }\n};\nfunction evaluateQuery(tree, options = {}) {\n  const root = fromJS(options.root), dataset = fromJS(options.dataset), params = { ...options.params }, scope = new Scope$1(\n    params,\n    dataset,\n    root,\n    {\n      timestamp: options.timestamp || /* @__PURE__ */ new Date(),\n      identity: options.identity === void 0 ? \"me\" : options.identity,\n      sanity: options.sanity,\n      after: options.after ? fromJS(options.after) : null,\n      before: options.before ? fromJS(options.before) : null,\n      dereference: options.dereference\n    },\n    null\n  );\n  return evaluate(tree, scope);\n}\nfunction canConstantEvaluate(node) {\n  switch (node.type) {\n    case \"Group\":\n      return canConstantEvaluate(node.base);\n    case \"Value\":\n    case \"Parameter\":\n      return !0;\n    case \"Pos\":\n    case \"Neg\":\n      return canConstantEvaluate(node.base);\n    case \"OpCall\":\n      switch (node.op) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \"%\":\n        case \"**\":\n          return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);\n        default:\n          return !1;\n      }\n    default:\n      return !1;\n  }\n}\nconst DUMMY_SCOPE = new Scope$1(\n  {},\n  NULL_VALUE,\n  NULL_VALUE,\n  { timestamp: /* @__PURE__ */ new Date(0), identity: \"me\", before: null, after: null },\n  null\n);\nfunction tryConstantEvaluate(node) {\n  return canConstantEvaluate(node) ? constantEvaluate(node) : null;\n}\nfunction constantEvaluate(node) {\n  const value = evaluate(node, DUMMY_SCOPE, constantEvaluate);\n  if (\"then\" in value)\n    throw new Error(\"BUG: constant evaluate should never return a promise\");\n  return value;\n}\nasync function portableTextContent(value) {\n  if (value.type === \"object\")\n    return blockText(value.data);\n  if (value.isArray()) {\n    const texts = await arrayText(value);\n    if (texts.length > 0)\n      return texts.join(`\n\n`);\n  }\n  return null;\n}\nasync function arrayText(value, result = []) {\n  for await (const block of value)\n    if (block.type === \"object\") {\n      const text = blockText(block.data);\n      text !== null && result.push(text);\n    } else block.isArray() && await arrayText(block, result);\n  return result;\n}\nfunction blockText(obj) {\n  if (typeof obj._type != \"string\") return null;\n  const children = obj.children;\n  if (!Array.isArray(children)) return null;\n  let result = \"\";\n  for (const child of children)\n    child && typeof child == \"object\" && typeof child._type == \"string\" && child._type === \"span\" && typeof child.text == \"string\" && (result += child.text);\n  return result;\n}\nconst BM25k = 1.2;\nasync function evaluateScore(node, scope, execute) {\n  if (node.type === \"OpCall\" && node.op === \"match\")\n    return evaluateMatchScore(node.left, node.right, scope, execute);\n  if (node.type === \"FuncCall\" && node.name === \"boost\") {\n    const innerScore = await evaluateScore(node.args[0], scope, execute), boost = await execute(node.args[1], scope);\n    return boost.type === \"number\" && innerScore > 0 ? innerScore + boost.data : 0;\n  }\n  switch (node.type) {\n    case \"Or\": {\n      const leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);\n      return leftScore + rightScore;\n    }\n    case \"And\": {\n      const leftScore = await evaluateScore(node.left, scope, execute), rightScore = await evaluateScore(node.right, scope, execute);\n      return leftScore === 0 || rightScore === 0 ? 0 : leftScore + rightScore;\n    }\n    default: {\n      const res = await execute(node, scope);\n      return res.type === \"boolean\" && res.data === !0 ? 1 : 0;\n    }\n  }\n}\nasync function evaluateMatchScore(left, right, scope, execute) {\n  const text = await execute(left, scope), pattern = await execute(right, scope);\n  let tokens = [], terms = [];\n  if (await gatherText(text, (part) => {\n    tokens = tokens.concat(matchTokenize(part));\n  }), !await gatherText(pattern, (part) => {\n    terms = terms.concat(matchPatternRegex(part));\n  }) || tokens.length === 0 || terms.length === 0)\n    return 0;\n  let score = 0;\n  for (const re of terms) {\n    const freq = tokens.reduce((c, token) => c + (re.test(token) ? 1 : 0), 0);\n    score += freq * (BM25k + 1) / (freq + BM25k);\n  }\n  return score;\n}\nfunction hasReference(value, pathSet) {\n  switch (getType(value)) {\n    case \"array\":\n      for (const v of value)\n        if (hasReference(v, pathSet))\n          return !0;\n      break;\n    case \"object\":\n      if (value._ref)\n        return pathSet.has(value._ref);\n      for (const v of Object.values(value))\n        if (hasReference(v, pathSet))\n          return !0;\n      break;\n  }\n  return !1;\n}\nfunction countUTF8(str) {\n  let count2 = 0;\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n    code >= 55296 && code <= 56319 || count2++;\n  }\n  return count2;\n}\nconst _global = {};\n_global.anywhere = async function() {\n  throw new Error(\"not implemented\");\n};\n_global.anywhere.arity = 1;\n_global.coalesce = async function(args, scope, execute) {\n  for (const arg of args) {\n    const value = await execute(arg, scope);\n    if (value.type !== \"null\")\n      return value;\n  }\n  return NULL_VALUE;\n};\n_global.count = async function(args, scope, execute) {\n  const inner = await execute(args[0], scope);\n  if (!inner.isArray())\n    return NULL_VALUE;\n  let num = 0;\n  for await (const _ of inner)\n    num++;\n  return fromNumber(num);\n};\n_global.count.arity = 1;\n_global.dateTime = async function(args, scope, execute) {\n  const val = await execute(args[0], scope);\n  return val.type === \"datetime\" ? val : val.type !== \"string\" ? NULL_VALUE : DateTime.parseToValue(val.data);\n};\n_global.dateTime.arity = 1;\n_global.defined = async function(args, scope, execute) {\n  return (await execute(args[0], scope)).type === \"null\" ? FALSE_VALUE : TRUE_VALUE;\n};\n_global.defined.arity = 1;\n_global.identity = async function(_args, scope) {\n  return fromString(scope.context.identity);\n};\n_global.identity.arity = 0;\n_global.length = async function(args, scope, execute) {\n  const inner = await execute(args[0], scope);\n  if (inner.type === \"string\")\n    return fromNumber(countUTF8(inner.data));\n  if (inner.isArray()) {\n    let num = 0;\n    for await (const _ of inner)\n      num++;\n    return fromNumber(num);\n  }\n  return NULL_VALUE;\n};\n_global.length.arity = 1;\n_global.path = async function(args, scope, execute) {\n  const inner = await execute(args[0], scope);\n  return inner.type !== \"string\" ? NULL_VALUE : fromPath(new Path(inner.data));\n};\n_global.path.arity = 1;\n_global.string = async function(args, scope, execute) {\n  const value = await execute(args[0], scope);\n  switch (value.type) {\n    case \"number\":\n    case \"string\":\n    case \"boolean\":\n    case \"datetime\":\n      return fromString(`${value.data}`);\n    default:\n      return NULL_VALUE;\n  }\n};\n_global.string.arity = 1;\n_global.references = async function(args, scope, execute) {\n  const pathSet = /* @__PURE__ */ new Set();\n  for (const arg of args) {\n    const path2 = await execute(arg, scope);\n    if (path2.type === \"string\")\n      pathSet.add(path2.data);\n    else if (path2.isArray())\n      for await (const elem of path2)\n        elem.type === \"string\" && pathSet.add(elem.data);\n  }\n  if (pathSet.size === 0)\n    return FALSE_VALUE;\n  const scopeValue = await scope.value.get();\n  return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;\n};\n_global.references.arity = (c) => c >= 1;\n_global.round = async function(args, scope, execute) {\n  const value = await execute(args[0], scope);\n  if (value.type !== \"number\")\n    return NULL_VALUE;\n  const num = value.data;\n  let prec = 0;\n  if (args.length === 2) {\n    const precValue = await execute(args[1], scope);\n    if (precValue.type !== \"number\" || precValue.data < 0 || !Number.isInteger(precValue.data))\n      return NULL_VALUE;\n    prec = precValue.data;\n  }\n  return prec === 0 ? num < 0 ? fromNumber(-Math.round(-num)) : fromNumber(Math.round(num)) : fromNumber(Number(num.toFixed(prec)));\n};\n_global.round.arity = (count2) => count2 >= 1 && count2 <= 2;\n_global.now = async function(_args, scope) {\n  return fromString(scope.context.timestamp.toISOString());\n};\n_global.now.arity = 0;\n_global.boost = async function() {\n  throw new Error(\"unexpected boost call\");\n};\n_global.boost.arity = 2;\nconst string2 = {};\nstring2.lower = async function(args, scope, execute) {\n  const value = await execute(args[0], scope);\n  return value.type !== \"string\" ? NULL_VALUE : fromString(value.data.toLowerCase());\n};\nstring2.lower.arity = 1;\nstring2.upper = async function(args, scope, execute) {\n  const value = await execute(args[0], scope);\n  return value.type !== \"string\" ? NULL_VALUE : fromString(value.data.toUpperCase());\n};\nstring2.upper.arity = 1;\nstring2.split = async function(args, scope, execute) {\n  const str = await execute(args[0], scope);\n  if (str.type !== \"string\")\n    return NULL_VALUE;\n  const sep = await execute(args[1], scope);\n  return sep.type !== \"string\" ? NULL_VALUE : str.data.length === 0 ? fromJS([]) : sep.data.length === 0 ? fromJS(Array.from(str.data)) : fromJS(str.data.split(sep.data));\n};\nstring2.split.arity = 2;\n_global.lower = string2.lower;\n_global.upper = string2.upper;\nstring2.startsWith = async function(args, scope, execute) {\n  const str = await execute(args[0], scope);\n  if (str.type !== \"string\")\n    return NULL_VALUE;\n  const prefix = await execute(args[1], scope);\n  return prefix.type !== \"string\" ? NULL_VALUE : str.data.startsWith(prefix.data) ? TRUE_VALUE : FALSE_VALUE;\n};\nstring2.startsWith.arity = 2;\nconst array = {};\narray.join = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  if (!arr.isArray())\n    return NULL_VALUE;\n  const sep = await execute(args[1], scope);\n  if (sep.type !== \"string\")\n    return NULL_VALUE;\n  let buf = \"\", needSep = !1;\n  for await (const elem of arr) {\n    switch (needSep && (buf += sep.data), elem.type) {\n      case \"number\":\n      case \"string\":\n      case \"boolean\":\n      case \"datetime\":\n        buf += `${elem.data}`;\n        break;\n      default:\n        return NULL_VALUE;\n    }\n    needSep = !0;\n  }\n  return fromJS(buf);\n};\narray.join.arity = 2;\narray.compact = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  return arr.isArray() ? new StreamValue(async function* () {\n    for await (const elem of arr)\n      elem.type !== \"null\" && (yield elem);\n  }) : NULL_VALUE;\n};\narray.compact.arity = 1;\narray.unique = async function(args, scope, execute) {\n  const value = await execute(args[0], scope);\n  return value.isArray() ? new StreamValue(async function* () {\n    const added = /* @__PURE__ */ new Set();\n    for await (const iter of value)\n      switch (iter.type) {\n        case \"number\":\n        case \"string\":\n        case \"boolean\":\n        case \"datetime\":\n          added.has(iter.data) || (added.add(iter.data), yield iter);\n          break;\n        default:\n          yield iter;\n      }\n  }) : NULL_VALUE;\n};\narray.unique.arity = 1;\nconst pt = {};\npt.text = async function(args, scope, execute) {\n  const value = await execute(args[0], scope), text = await portableTextContent(value);\n  return text === null ? NULL_VALUE : fromString(text);\n};\npt.text.arity = 1;\nconst sanity = {};\nsanity.projectId = async function(_args, scope) {\n  return scope.context.sanity ? fromString(scope.context.sanity.projectId) : NULL_VALUE;\n};\nsanity.dataset = async function(_args, scope) {\n  return scope.context.sanity ? fromString(scope.context.sanity.dataset) : NULL_VALUE;\n};\nsanity.versionOf = async function(args, scope, execute) {\n  if (!scope.source.isArray()) return NULL_VALUE;\n  const value = await execute(args[0], scope);\n  if (value.type !== \"string\") return NULL_VALUE;\n  const baseId = value.data, versionIds = [];\n  for await (const value2 of scope.source)\n    if (getType(value2) === \"object\") {\n      const val = await value2.get();\n      val && \"_id\" in val && val._id.split(\".\").length === 2 && val._id.endsWith(`.${baseId}`) && \"_version\" in val && typeof val._version == \"object\" && versionIds.push(val._id);\n    }\n  return fromJS(versionIds);\n};\nsanity.versionOf.arity = 1;\nsanity.documentsOf = async function(args, scope, execute) {\n  if (!scope.source.isArray()) return NULL_VALUE;\n  const value = await execute(args[0], scope);\n  if (value.type !== \"string\") return NULL_VALUE;\n  const baseId = value.data, documentIdsInBundle = [];\n  for await (const value2 of scope.source)\n    if (getType(value2) === \"object\") {\n      const val = await value2.get();\n      val && \"_id\" in val && val._id.split(\".\").length === 2 && val._id.startsWith(`${baseId}.`) && \"_version\" in val && typeof val._version == \"object\" && documentIdsInBundle.push(val._id);\n    }\n  return fromJS(documentIdsInBundle);\n};\nsanity.documentsOf.arity = 1;\nconst pipeFunctions = {};\npipeFunctions.order = async function(base, args, scope, execute) {\n  if (await !0, !base.isArray())\n    return NULL_VALUE;\n  const mappers = [], directions = [];\n  let n = 0;\n  for (let mapper of args) {\n    let direction = \"asc\";\n    mapper.type === \"Desc\" ? (direction = \"desc\", mapper = mapper.base) : mapper.type === \"Asc\" && (mapper = mapper.base), mappers.push(mapper), directions.push(direction), n++;\n  }\n  const aux = [];\n  let idx = 0;\n  for await (const value of base) {\n    const newScope = scope.createNested(value), tuple = [await value.get(), idx];\n    for (let i = 0; i < n; i++) {\n      const result = await execute(mappers[i], newScope);\n      tuple.push(await result.get());\n    }\n    aux.push(tuple), idx++;\n  }\n  return aux.sort((aTuple, bTuple) => {\n    for (let i = 0; i < n; i++) {\n      let c = totalCompare(aTuple[i + 2], bTuple[i + 2]);\n      if (directions[i] === \"desc\" && (c = -c), c !== 0)\n        return c;\n    }\n    return aTuple[1] - bTuple[1];\n  }), fromJS(aux.map((v) => v[0]));\n};\npipeFunctions.order.arity = (count2) => count2 >= 1;\npipeFunctions.score = async function(base, args, scope, execute) {\n  if (!base.isArray()) return NULL_VALUE;\n  const unknown = [], scored = [];\n  for await (const value of base) {\n    if (value.type !== \"object\") {\n      unknown.push(await value.get());\n      continue;\n    }\n    const newScope = scope.createNested(value);\n    let valueScore = typeof value.data._score == \"number\" ? value.data._score : 0;\n    for (const arg of args)\n      valueScore += await evaluateScore(arg, newScope, execute);\n    const newObject = Object.assign({}, value.data, { _score: valueScore });\n    scored.push(newObject);\n  }\n  return scored.sort((a, b) => b._score - a._score), fromJS(scored);\n};\npipeFunctions.score.arity = (count2) => count2 >= 1;\nconst delta = {};\ndelta.operation = async function(_args, scope) {\n  const hasBefore = scope.context.before !== null, hasAfter = scope.context.after !== null;\n  return hasBefore && hasAfter ? fromString(\"update\") : hasAfter ? fromString(\"create\") : hasBefore ? fromString(\"delete\") : NULL_VALUE;\n};\ndelta.changedAny = () => {\n  throw new Error(\"not implemented\");\n};\ndelta.changedAny.arity = 1;\ndelta.changedAny.mode = \"delta\";\ndelta.changedOnly = () => {\n  throw new Error(\"not implemented\");\n};\ndelta.changedOnly.arity = 1;\ndelta.changedOnly.mode = \"delta\";\nconst diff = {};\ndiff.changedAny = () => {\n  throw new Error(\"not implemented\");\n};\ndiff.changedAny.arity = 3;\ndiff.changedOnly = () => {\n  throw new Error(\"not implemented\");\n};\ndiff.changedOnly.arity = 3;\nconst math = {};\nmath.min = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  if (!arr.isArray())\n    return NULL_VALUE;\n  let n;\n  for await (const elem of arr)\n    if (elem.type !== \"null\") {\n      if (elem.type !== \"number\")\n        return NULL_VALUE;\n      (n === void 0 || elem.data < n) && (n = elem.data);\n    }\n  return fromJS(n);\n};\nmath.min.arity = 1;\nmath.max = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  if (!arr.isArray())\n    return NULL_VALUE;\n  let n;\n  for await (const elem of arr)\n    if (elem.type !== \"null\") {\n      if (elem.type !== \"number\")\n        return NULL_VALUE;\n      (n === void 0 || elem.data > n) && (n = elem.data);\n    }\n  return fromJS(n);\n};\nmath.max.arity = 1;\nmath.sum = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  if (!arr.isArray())\n    return NULL_VALUE;\n  let n = 0;\n  for await (const elem of arr)\n    if (elem.type !== \"null\") {\n      if (elem.type !== \"number\")\n        return NULL_VALUE;\n      n += elem.data;\n    }\n  return fromJS(n);\n};\nmath.sum.arity = 1;\nmath.avg = async function(args, scope, execute) {\n  const arr = await execute(args[0], scope);\n  if (!arr.isArray())\n    return NULL_VALUE;\n  let n = 0, c = 0;\n  for await (const elem of arr)\n    if (elem.type !== \"null\") {\n      if (elem.type !== \"number\")\n        return NULL_VALUE;\n      n += elem.data, c++;\n    }\n  return c === 0 ? NULL_VALUE : fromJS(n / c);\n};\nmath.avg.arity = 1;\nconst dateTime2 = {};\ndateTime2.now = async function(_args, scope) {\n  return fromDateTime(new DateTime(scope.context.timestamp));\n};\ndateTime2.now.arity = 0;\nconst namespaces = {\n  global: _global,\n  string: string2,\n  array,\n  pt,\n  delta,\n  diff,\n  sanity,\n  math,\n  dateTime: dateTime2\n};\nvar __defProp$2 = Object.defineProperty, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$2 = (obj, key, value) => __defNormalProp$2(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass MarkProcessor {\n  constructor(string, marks, parseOptions) {\n    __publicField$2(this, \"string\"), __publicField$2(this, \"marks\"), __publicField$2(this, \"index\"), __publicField$2(this, \"parseOptions\"), __publicField$2(this, \"allowBoost\", !1), this.string = string, this.marks = marks, this.index = 0, this.parseOptions = parseOptions;\n  }\n  hasMark(pos = 0) {\n    return this.index + pos < this.marks.length;\n  }\n  getMark(pos = 0) {\n    return this.marks[this.index + pos];\n  }\n  shift() {\n    this.index += 1;\n  }\n  process(visitor) {\n    const mark = this.marks[this.index];\n    this.shift();\n    const func = visitor[mark.name];\n    if (!func)\n      throw new Error(`Unknown handler: ${mark.name}`);\n    return func.call(visitor, this, mark);\n  }\n  processString() {\n    return this.shift(), this.processStringEnd();\n  }\n  processStringEnd() {\n    const prev = this.marks[this.index - 1], curr = this.marks[this.index];\n    return this.shift(), this.string.slice(prev.position, curr.position);\n  }\n  slice(len) {\n    const pos = this.marks[this.index].position;\n    return this.string.slice(pos, pos + len);\n  }\n}\nconst WS = /^([\\t\\n\\v\\f\\r \\u0085\\u00A0]|(\\/\\/[^\\n]*\\n))+/, NUM = /^\\d+/, IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/;\nfunction parse$1(str) {\n  let pos = 0;\n  pos = skipWS(str, pos);\n  let result = parseExpr(str, pos, 0);\n  return result.type === \"error\" ? result : (pos = skipWS(str, result.position), pos !== str.length ? (result.failPosition && (pos = result.failPosition - 1), { type: \"error\", position: pos }) : (delete result.position, delete result.failPosition, result));\n}\nfunction parseExpr(str, pos, level) {\n  let startPos = pos, token = str[pos], marks;\n  switch (token) {\n    case \"+\": {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 10);\n      if (rhs.type === \"error\") return rhs;\n      marks = [{ name: \"pos\", position: startPos }].concat(rhs.marks), pos = rhs.position;\n      break;\n    }\n    case \"-\": {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 8);\n      if (rhs.type === \"error\") return rhs;\n      marks = [{ name: \"neg\", position: startPos }].concat(rhs.marks), pos = rhs.position;\n      break;\n    }\n    case \"(\": {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 0);\n      if (rhs.type === \"error\") return rhs;\n      switch (pos = skipWS(str, rhs.position), str[pos]) {\n        case \",\": {\n          for (marks = [{ name: \"tuple\", position: startPos }].concat(rhs.marks), pos = skipWS(str, pos + 1); ; ) {\n            if (rhs = parseExpr(str, pos, 0), rhs.type === \"error\") return rhs;\n            if (pos = skipWS(str, rhs.position), str[pos] !== \",\") break;\n            pos = skipWS(str, pos + 1);\n          }\n          if (str[pos] !== \")\") return { type: \"error\", position: pos };\n          pos++, marks.push({ name: \"tuple_end\", position: pos });\n          break;\n        }\n        case \")\": {\n          pos++, marks = [{ name: \"group\", position: startPos }].concat(rhs.marks);\n          break;\n        }\n        default:\n          return { type: \"error\", position: pos };\n      }\n      break;\n    }\n    case \"!\": {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 10);\n      if (rhs.type === \"error\") return rhs;\n      marks = [{ name: \"not\", position: startPos }].concat(rhs.marks), pos = rhs.position;\n      break;\n    }\n    case \"{\": {\n      let result = parseObject(str, pos);\n      if (result.type === \"error\") return result;\n      marks = result.marks, pos = result.position;\n      break;\n    }\n    case \"[\":\n      if (marks = [{ name: \"array\", position: pos }], pos = skipWS(str, pos + 1), str[pos] !== \"]\")\n        for (; ; ) {\n          str.slice(pos, pos + 3) === \"...\" && (marks.push({ name: \"array_splat\", position: pos }), pos = skipWS(str, pos + 3));\n          let res = parseExpr(str, pos, 0);\n          if (res.type === \"error\") return res;\n          if (marks = marks.concat(res.marks), pos = res.position, pos = skipWS(str, pos), str[pos] !== \",\" || (pos = skipWS(str, pos + 1), str[pos] === \"]\")) break;\n        }\n      if (str[pos] === \"]\")\n        pos++, marks.push({ name: \"array_end\", position: pos });\n      else\n        return { type: \"error\", position: pos };\n      break;\n    case \"'\":\n    case '\"': {\n      let result = parseString(str, pos);\n      if (result.type === \"error\") return result;\n      marks = result.marks, pos = result.position;\n      break;\n    }\n    case \"^\": {\n      for (pos++, marks = []; str[pos] === \".\" && str[pos + 1] === \"^\"; )\n        marks.push({ name: \"dblparent\", position: startPos }), pos += 2;\n      marks.push({ name: \"parent\", position: startPos });\n      break;\n    }\n    case \"@\":\n      marks = [{ name: \"this\", position: startPos }], pos++;\n      break;\n    case \"*\":\n      marks = [{ name: \"everything\", position: startPos }], pos++;\n      break;\n    case \"$\": {\n      let identLen = parseRegex(str, pos + 1, IDENT);\n      identLen && (pos += 1 + identLen, marks = [\n        { name: \"param\", position: startPos },\n        { name: \"ident\", position: startPos + 1 },\n        { name: \"ident_end\", position: pos }\n      ]);\n      break;\n    }\n    default: {\n      let numLen = parseRegex(str, pos, NUM);\n      if (numLen) {\n        pos += numLen;\n        let name = \"integer\";\n        if (str[pos] === \".\") {\n          let fracLen = parseRegex(str, pos + 1, NUM);\n          fracLen && (name = \"float\", pos += 1 + fracLen);\n        }\n        if (str[pos] === \"e\" || str[pos] === \"E\") {\n          name = \"sci\", pos++, (str[pos] === \"+\" || str[pos] === \"-\") && pos++;\n          let expLen = parseRegex(str, pos, NUM);\n          if (!expLen) return { type: \"error\", position: pos };\n          pos += expLen;\n        }\n        marks = [\n          { name, position: startPos },\n          { name: name + \"_end\", position: pos }\n        ];\n        break;\n      }\n      let identLen = parseRegex(str, pos, IDENT);\n      if (identLen) {\n        switch (pos += identLen, str[pos]) {\n          case \":\":\n          case \"(\": {\n            let result = parseFuncCall(str, startPos, pos);\n            if (result.type === \"error\") return result;\n            marks = result.marks, pos = result.position;\n            break;\n          }\n          default:\n            marks = [\n              { name: \"this_attr\", position: startPos },\n              { name: \"ident\", position: startPos },\n              { name: \"ident_end\", position: pos }\n            ];\n        }\n        break;\n      }\n    }\n  }\n  if (!marks)\n    return { type: \"error\", position: pos };\n  let lhsLevel = 12, trav;\n  loop: for (; ; ) {\n    let innerPos = skipWS(str, pos);\n    if (innerPos === str.length) {\n      pos = innerPos;\n      break;\n    }\n    if (trav = parseTraversal(str, innerPos), trav.type === \"success\") {\n      for (marks.unshift({ name: \"traverse\", position: startPos }); trav.type === \"success\"; )\n        marks = marks.concat(trav.marks), pos = trav.position, trav = parseTraversal(str, skipWS(str, pos));\n      marks.push({ name: \"traversal_end\", position: pos });\n      continue;\n    }\n    switch (str[innerPos]) {\n      case \"=\": {\n        switch (str[innerPos + 1]) {\n          case \">\": {\n            if (level > 1 || lhsLevel <= 1) break loop;\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), 1);\n            if (rhs.type === \"error\") return rhs;\n            marks = marks.concat(rhs.marks), marks.unshift({ name: \"pair\", position: startPos }), pos = rhs.position, lhsLevel = 1;\n            break;\n          }\n          case \"=\": {\n            if (level > 4 || lhsLevel <= 4) break loop;\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);\n            if (rhs.type === \"error\") return rhs;\n            marks.unshift({ name: \"comp\", position: startPos }), marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;\n            break;\n          }\n          default:\n            break loop;\n        }\n        break;\n      }\n      case \"+\": {\n        if (level > 6 || lhsLevel < 6) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), 7);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"add\", position: startPos }), pos = rhs.position, lhsLevel = 6;\n        break;\n      }\n      case \"-\": {\n        if (level > 6 || lhsLevel < 6) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), 7);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"sub\", position: startPos }), pos = rhs.position, lhsLevel = 6;\n        break;\n      }\n      case \"*\": {\n        if (str[innerPos + 1] === \"*\") {\n          if (level > 8 || lhsLevel <= 8) break loop;\n          let rhs2 = parseExpr(str, skipWS(str, innerPos + 2), 8);\n          if (rhs2.type === \"error\") return rhs2;\n          marks = marks.concat(rhs2.marks), marks.unshift({ name: \"pow\", position: startPos }), pos = rhs2.position, lhsLevel = 8;\n          break;\n        }\n        if (level > 7 || lhsLevel < 7) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), 8);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"mul\", position: startPos }), pos = rhs.position, lhsLevel = 7;\n        break;\n      }\n      case \"/\": {\n        if (level > 7 || lhsLevel < 7) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), 8);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"div\", position: startPos }), pos = rhs.position, lhsLevel = 7;\n        break;\n      }\n      case \"%\": {\n        if (level > 7 || lhsLevel < 7) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), 8);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"mod\", position: startPos }), pos = rhs.position, lhsLevel = 7;\n        break;\n      }\n      case \"<\":\n      case \">\": {\n        if (level > 4 || lhsLevel <= 4) break loop;\n        let nextPos = innerPos + 1;\n        str[nextPos] === \"=\" && nextPos++;\n        let rhs = parseExpr(str, skipWS(str, nextPos), 5);\n        if (rhs.type === \"error\") return rhs;\n        marks.unshift({ name: \"comp\", position: startPos }), marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: nextPos }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;\n        break;\n      }\n      case \"|\": {\n        if (str[innerPos + 1] === \"|\") {\n          if (level > 2 || lhsLevel < 2) break loop;\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), 3);\n          if (rhs.type === \"error\") return rhs;\n          marks = marks.concat(rhs.marks), marks.unshift({ name: \"or\", position: startPos }), pos = rhs.position, lhsLevel = 2;\n        } else {\n          if (level > 11 || lhsLevel < 11) break loop;\n          let identPos = skipWS(str, innerPos + 1), identLen = parseRegex(str, identPos, IDENT);\n          if (!identLen) return { type: \"error\", position: identPos };\n          if (pos = identPos + identLen, str[pos] === \"(\" || str[pos] === \":\") {\n            let result = parseFuncCall(str, identPos, pos);\n            if (result.type === \"error\") return result;\n            marks = marks.concat(result.marks), marks.unshift({ name: \"pipecall\", position: startPos }), pos = result.position, lhsLevel = 11;\n          }\n        }\n        break;\n      }\n      case \"&\": {\n        if (str[innerPos + 1] != \"&\" || level > 3 || lhsLevel < 3) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), 4);\n        if (rhs.type === \"error\") return rhs;\n        marks = marks.concat(rhs.marks), marks.unshift({ name: \"and\", position: startPos }), pos = rhs.position, lhsLevel = 3;\n        break;\n      }\n      case \"!\": {\n        if (str[innerPos + 1] !== \"=\" || level > 4 || lhsLevel <= 4) break loop;\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);\n        if (rhs.type === \"error\") return rhs;\n        marks.unshift({ name: \"comp\", position: startPos }), marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;\n        break;\n      }\n      case \"d\": {\n        if (str.slice(innerPos, innerPos + 4) !== \"desc\" || level > 4 || lhsLevel < 4) break loop;\n        marks.unshift({ name: \"desc\", position: startPos }), pos = innerPos + 4, lhsLevel = 4;\n        break;\n      }\n      case \"a\": {\n        if (str.slice(innerPos, innerPos + 3) !== \"asc\" || level > 4 || lhsLevel < 4) break loop;\n        marks.unshift({ name: \"asc\", position: startPos }), pos = innerPos + 3, lhsLevel = 4;\n        break;\n      }\n      default:\n        switch (parseRegexStr(str, innerPos, IDENT)) {\n          case \"in\": {\n            if (level > 4 || lhsLevel <= 4) break loop;\n            pos = skipWS(str, innerPos + 2);\n            let isGroup = !1;\n            str[pos] === \"(\" && (isGroup = !0, pos = skipWS(str, pos + 1));\n            let rangePos = pos, result = parseExpr(str, pos, 5);\n            if (result.type === \"error\") return result;\n            if (pos = skipWS(str, result.position), str[pos] === \".\" && str[pos + 1] === \".\") {\n              let type = \"inc_range\";\n              str[pos + 2] === \".\" ? (type = \"exc_range\", pos = skipWS(str, pos + 3)) : pos = skipWS(str, pos + 2);\n              let rhs = parseExpr(str, pos, 5);\n              if (rhs.type === \"error\") return rhs;\n              marks.unshift({ name: \"in_range\", position: startPos }), marks = marks.concat({ name: type, position: rangePos }, result.marks, rhs.marks), pos = rhs.position;\n            } else\n              marks.unshift({ name: \"comp\", position: startPos }), marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 2 }), marks = marks.concat(result.marks);\n            if (isGroup) {\n              if (pos = skipWS(str, pos), str[pos] !== \")\") return { type: \"error\", position: pos };\n              pos++;\n            }\n            lhsLevel = 4;\n            break;\n          }\n          case \"match\": {\n            if (level > 4 || lhsLevel <= 4) break loop;\n            let rhs = parseExpr(str, skipWS(str, innerPos + 5), 5);\n            if (rhs.type === \"error\") return rhs;\n            marks.unshift({ name: \"comp\", position: startPos }), marks.push({ name: \"op\", position: innerPos }, { name: \"op_end\", position: innerPos + 5 }), marks = marks.concat(rhs.marks), pos = rhs.position, lhsLevel = 4;\n            break;\n          }\n          default:\n            break loop;\n        }\n    }\n  }\n  let failPosition = (trav == null ? void 0 : trav.type) === \"error\" && trav.position;\n  return { type: \"success\", marks, position: pos, failPosition };\n}\nfunction parseTraversal(str, pos) {\n  let startPos = pos;\n  switch (str[pos]) {\n    case \".\": {\n      pos = skipWS(str, pos + 1);\n      let identStart = pos, identLen2 = parseRegex(str, pos, IDENT);\n      return identLen2 ? (pos += identLen2, {\n        type: \"success\",\n        marks: [\n          { name: \"attr_access\", position: startPos },\n          { name: \"ident\", position: identStart },\n          { name: \"ident_end\", position: pos }\n        ],\n        position: pos\n      }) : { type: \"error\", position: pos };\n    }\n    case \"-\":\n      if (str[pos + 1] !== \">\") return { type: \"error\", position: pos };\n      let marks = [{ name: \"deref\", position: startPos }];\n      pos += 2;\n      let identPos = skipWS(str, pos), identLen = parseRegex(str, identPos, IDENT);\n      return identLen && (pos = identPos + identLen, marks.push(\n        { name: \"deref_attr\", position: identPos },\n        { name: \"ident\", position: identPos },\n        { name: \"ident_end\", position: pos }\n      )), {\n        type: \"success\",\n        marks,\n        position: pos\n      };\n    case \"[\": {\n      if (pos = skipWS(str, pos + 1), str[pos] === \"]\")\n        return {\n          type: \"success\",\n          marks: [{ name: \"array_postfix\", position: startPos }],\n          position: pos + 1\n        };\n      let rangePos = pos, result = parseExpr(str, pos, 0);\n      if (result.type === \"error\") return result;\n      if (pos = skipWS(str, result.position), str[pos] === \".\" && str[pos + 1] === \".\") {\n        let type = \"inc_range\";\n        str[pos + 2] === \".\" ? (type = \"exc_range\", pos += 3) : pos += 2, pos = skipWS(str, pos);\n        let rhs = parseExpr(str, pos, 0);\n        return rhs.type === \"error\" ? rhs : (pos = skipWS(str, rhs.position), str[pos] !== \"]\" ? { type: \"error\", position: pos } : {\n          type: \"success\",\n          marks: [\n            { name: \"slice\", position: startPos },\n            { name: type, position: rangePos }\n          ].concat(result.marks, rhs.marks),\n          position: pos + 1\n        });\n      }\n      return str[pos] !== \"]\" ? { type: \"error\", position: pos } : {\n        type: \"success\",\n        marks: [{ name: \"square_bracket\", position: startPos }].concat(result.marks),\n        position: pos + 1\n      };\n    }\n    case \"|\": {\n      if (pos = skipWS(str, pos + 1), str[pos] === \"{\") {\n        let result = parseObject(str, pos);\n        return result.type === \"error\" || result.marks.unshift({ name: \"projection\", position: startPos }), result;\n      }\n      break;\n    }\n    case \"{\": {\n      let result = parseObject(str, pos);\n      return result.type === \"error\" || result.marks.unshift({ name: \"projection\", position: startPos }), result;\n    }\n  }\n  return { type: \"error\", position: pos };\n}\nfunction parseFuncCall(str, startPos, pos) {\n  let marks = [];\n  if (marks.push({ name: \"func_call\", position: startPos }), str[pos] === \":\" && str[pos + 1] === \":\") {\n    marks.push({ name: \"namespace\", position: startPos }), marks.push({ name: \"ident\", position: startPos }, { name: \"ident_end\", position: pos }), pos = skipWS(str, pos + 2);\n    let nameLen = parseRegex(str, pos, IDENT);\n    if (!nameLen) return { type: \"error\", position: pos };\n    if (marks.push({ name: \"ident\", position: pos }, { name: \"ident_end\", position: pos + nameLen }), pos = skipWS(str, pos + nameLen), str[pos] !== \"(\") return { type: \"error\", position: pos };\n    pos++, pos = skipWS(str, pos);\n  } else\n    marks.push({ name: \"ident\", position: startPos }, { name: \"ident_end\", position: pos }), pos = skipWS(str, pos + 1);\n  let lastPos = pos;\n  if (str[pos] !== \")\")\n    for (; ; ) {\n      let result = parseExpr(str, pos, 0);\n      if (result.type === \"error\") return result;\n      if (marks = marks.concat(result.marks), lastPos = result.position, pos = skipWS(str, result.position), str[pos] !== \",\" || (pos = skipWS(str, pos + 1), str[pos] === \")\")) break;\n    }\n  return str[pos] !== \")\" ? { type: \"error\", position: pos } : (marks.push({ name: \"func_args_end\", position: lastPos }), {\n    type: \"success\",\n    marks,\n    position: pos + 1\n  });\n}\nfunction parseObject(str, pos) {\n  let marks = [{ name: \"object\", position: pos }];\n  for (pos = skipWS(str, pos + 1); str[pos] !== \"}\"; ) {\n    let pairPos = pos;\n    if (str.slice(pos, pos + 3) === \"...\")\n      if (pos = skipWS(str, pos + 3), str[pos] !== \"}\" && str[pos] !== \",\") {\n        let expr = parseExpr(str, pos, 0);\n        if (expr.type === \"error\") return expr;\n        marks.push({ name: \"object_splat\", position: pairPos }), marks = marks.concat(expr.marks), pos = expr.position;\n      } else\n        marks.push({ name: \"object_splat_this\", position: pairPos });\n    else {\n      let expr = parseExpr(str, pos, 0);\n      if (expr.type === \"error\") return expr;\n      let nextPos = skipWS(str, expr.position);\n      if (expr.marks[0].name === \"str\" && str[nextPos] === \":\") {\n        let value = parseExpr(str, skipWS(str, nextPos + 1), 0);\n        if (value.type === \"error\") return value;\n        marks.push({ name: \"object_pair\", position: pairPos }), marks = marks.concat(expr.marks, value.marks), pos = value.position;\n      } else\n        marks = marks.concat({ name: \"object_expr\", position: pos }, expr.marks), pos = expr.position;\n    }\n    if (pos = skipWS(str, pos), str[pos] !== \",\") break;\n    pos = skipWS(str, pos + 1);\n  }\n  return str[pos] !== \"}\" ? { type: \"error\", position: pos } : (pos++, marks.push({ name: \"object_end\", position: pos }), { type: \"success\", marks, position: pos });\n}\nfunction parseString(str, pos) {\n  let token = str[pos];\n  pos = pos + 1;\n  const marks = [{ name: \"str\", position: pos }];\n  str: for (; ; pos++) {\n    if (pos > str.length) return { type: \"error\", position: pos };\n    switch (str[pos]) {\n      case token: {\n        marks.push({ name: \"str_end\", position: pos }), pos++;\n        break str;\n      }\n      case \"\\\\\":\n        marks.push({ name: \"str_pause\", position: pos }), str[pos + 1] === \"u\" ? str[pos + 2] === \"{\" ? (marks.push({ name: \"unicode_hex\", position: pos + 3 }), pos = str.indexOf(\"}\", pos + 3), marks.push({ name: \"unicode_hex_end\", position: pos })) : (marks.push({ name: \"unicode_hex\", position: pos + 2 }), marks.push({ name: \"unicode_hex_end\", position: pos + 6 }), pos += 5) : (marks.push({ name: \"single_escape\", position: pos + 1 }), pos += 1), marks.push({ name: \"str_start\", position: pos + 1 });\n    }\n  }\n  return { type: \"success\", marks, position: pos };\n}\nfunction skipWS(str, pos) {\n  return pos + parseRegex(str, pos, WS);\n}\nfunction parseRegex(str, pos, re) {\n  let m = re.exec(str.slice(pos));\n  return m ? m[0].length : 0;\n}\nfunction parseRegexStr(str, pos, re) {\n  let m = re.exec(str.slice(pos));\n  return m ? m[0] : null;\n}\nfunction join(a, b) {\n  return (base) => b(a(base));\n}\nfunction map(inner) {\n  return (base) => ({ type: \"Map\", base, expr: inner({ type: \"This\" }) });\n}\nfunction flatMap(inner) {\n  return (base) => ({ type: \"FlatMap\", base, expr: inner({ type: \"This\" }) });\n}\nfunction traverseArray(build, right) {\n  if (!right)\n    return {\n      type: \"a-a\",\n      build\n    };\n  switch (right.type) {\n    case \"a-a\":\n      return {\n        type: \"a-a\",\n        build: join(build, right.build)\n      };\n    case \"a-b\":\n      return {\n        type: \"a-b\",\n        build: join(build, right.build)\n      };\n    case \"b-b\":\n      return {\n        type: \"a-a\",\n        build: join(build, map(right.build))\n      };\n    case \"b-a\":\n      return {\n        type: \"a-a\",\n        build: join(build, flatMap(right.build))\n      };\n    default:\n      throw new Error(`unknown type: ${right.type}`);\n  }\n}\nfunction traversePlain(mapper, right) {\n  if (!right)\n    return {\n      type: \"b-b\",\n      build: mapper\n    };\n  switch (right.type) {\n    case \"a-a\":\n    case \"b-a\":\n      return {\n        type: \"b-a\",\n        build: join(mapper, right.build)\n      };\n    case \"a-b\":\n    case \"b-b\":\n      return {\n        type: \"b-b\",\n        build: join(mapper, right.build)\n      };\n    default:\n      throw new Error(`unknown type: ${right.type}`);\n  }\n}\nfunction traverseElement(mapper, right) {\n  if (!right)\n    return {\n      type: \"a-b\",\n      build: mapper\n    };\n  switch (right.type) {\n    case \"a-a\":\n    case \"b-a\":\n      return {\n        type: \"a-a\",\n        build: join(mapper, right.build)\n      };\n    case \"a-b\":\n    case \"b-b\":\n      return {\n        type: \"a-b\",\n        build: join(mapper, right.build)\n      };\n    default:\n      throw new Error(`unknown type: ${right.type}`);\n  }\n}\nfunction traverseProjection(mapper, right) {\n  if (!right)\n    return {\n      type: \"b-b\",\n      build: mapper\n    };\n  switch (right.type) {\n    case \"a-a\":\n      return {\n        type: \"a-a\",\n        build: join(map(mapper), right.build)\n      };\n    case \"a-b\":\n      return {\n        type: \"a-b\",\n        build: join(map(mapper), right.build)\n      };\n    case \"b-a\":\n      return {\n        type: \"b-a\",\n        build: join(mapper, right.build)\n      };\n    case \"b-b\":\n      return {\n        type: \"b-b\",\n        build: join(mapper, right.build)\n      };\n    default:\n      throw new Error(`unknown type: ${right.type}`);\n  }\n}\nvar __defProp$1 = Object.defineProperty, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$1 = (obj, key, value) => __defNormalProp$1(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nconst ESCAPE_SEQUENCE = {\n  \"'\": \"'\",\n  '\"': '\"',\n  \"\\\\\": \"\\\\\",\n  \"/\": \"/\",\n  b: \"\\b\",\n  f: \"\\f\",\n  n: `\n`,\n  r: \"\\r\",\n  t: \"\t\"\n};\nfunction expandHex(str) {\n  const charCode = parseInt(str, 16);\n  return String.fromCharCode(charCode);\n}\nclass GroqQueryError extends Error {\n  constructor() {\n    super(...arguments), __publicField$1(this, \"name\", \"GroqQueryError\");\n  }\n}\nconst EXPR_BUILDER = {\n  group(p) {\n    return {\n      type: \"Group\",\n      base: p.process(EXPR_BUILDER)\n    };\n  },\n  everything() {\n    return { type: \"Everything\" };\n  },\n  this() {\n    return { type: \"This\" };\n  },\n  parent() {\n    return {\n      type: \"Parent\",\n      n: 1\n    };\n  },\n  dblparent(p) {\n    return {\n      type: \"Parent\",\n      n: p.process(EXPR_BUILDER).n + 1\n    };\n  },\n  traverse(p) {\n    const base = p.process(EXPR_BUILDER), traversalList = [];\n    for (; p.getMark().name !== \"traversal_end\"; )\n      traversalList.push(p.process(TRAVERSE_BUILDER));\n    p.shift();\n    let traversal = null;\n    for (let i = traversalList.length - 1; i >= 0; i--)\n      traversal = traversalList[i](traversal);\n    if ((base.type === \"Everything\" || base.type === \"Array\" || base.type === \"PipeFuncCall\") && (traversal = traverseArray((val) => val, traversal)), traversal === null) throw new Error(\"BUG: unexpected empty traversal\");\n    return traversal.build(base);\n  },\n  this_attr(p) {\n    const name = p.processString();\n    return name === \"null\" ? { type: \"Value\", value: null } : name === \"true\" ? { type: \"Value\", value: !0 } : name === \"false\" ? { type: \"Value\", value: !1 } : {\n      type: \"AccessAttribute\",\n      name\n    };\n  },\n  neg(p) {\n    return {\n      type: \"Neg\",\n      base: p.process(EXPR_BUILDER)\n    };\n  },\n  pos(p) {\n    return {\n      type: \"Pos\",\n      base: p.process(EXPR_BUILDER)\n    };\n  },\n  add(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"+\",\n      left,\n      right\n    };\n  },\n  sub(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"-\",\n      left,\n      right\n    };\n  },\n  mul(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"*\",\n      left,\n      right\n    };\n  },\n  div(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"/\",\n      left,\n      right\n    };\n  },\n  mod(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"%\",\n      left,\n      right\n    };\n  },\n  pow(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op: \"**\",\n      left,\n      right\n    };\n  },\n  comp(p) {\n    const left = p.process(EXPR_BUILDER), op = p.processString(), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"OpCall\",\n      op,\n      left,\n      right\n    };\n  },\n  in_range(p) {\n    const base = p.process(EXPR_BUILDER), isInclusive = p.getMark().name === \"inc_range\";\n    p.shift();\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"InRange\",\n      base,\n      left,\n      right,\n      isInclusive\n    };\n  },\n  str(p) {\n    let value = \"\";\n    loop: for (; p.hasMark(); ) {\n      const mark = p.getMark();\n      switch (mark.name) {\n        case \"str_end\":\n          value += p.processStringEnd();\n          break loop;\n        case \"str_pause\":\n          value += p.processStringEnd();\n          break;\n        case \"str_start\":\n          p.shift();\n          break;\n        case \"single_escape\": {\n          const char = p.slice(1);\n          p.shift(), value += ESCAPE_SEQUENCE[char];\n          break;\n        }\n        case \"unicode_hex\":\n          p.shift(), value += expandHex(p.processStringEnd());\n          break;\n        default:\n          throw new Error(`unexpected mark: ${mark.name}`);\n      }\n    }\n    return { type: \"Value\", value };\n  },\n  integer(p) {\n    const strValue = p.processStringEnd();\n    return {\n      type: \"Value\",\n      value: Number(strValue)\n    };\n  },\n  float(p) {\n    const strValue = p.processStringEnd();\n    return {\n      type: \"Value\",\n      value: Number(strValue)\n    };\n  },\n  sci(p) {\n    const strValue = p.processStringEnd();\n    return {\n      type: \"Value\",\n      value: Number(strValue)\n    };\n  },\n  object(p) {\n    const attributes = [];\n    for (; p.getMark().name !== \"object_end\"; )\n      attributes.push(p.process(OBJECT_BUILDER));\n    return p.shift(), {\n      type: \"Object\",\n      attributes\n    };\n  },\n  array(p) {\n    const elements = [];\n    for (; p.getMark().name !== \"array_end\"; ) {\n      let isSplat = !1;\n      p.getMark().name === \"array_splat\" && (isSplat = !0, p.shift());\n      const value = p.process(EXPR_BUILDER);\n      elements.push({\n        type: \"ArrayElement\",\n        value,\n        isSplat\n      });\n    }\n    return p.shift(), {\n      type: \"Array\",\n      elements\n    };\n  },\n  tuple(p) {\n    const members = [];\n    for (; p.getMark().name !== \"tuple_end\"; )\n      members.push(p.process(EXPR_BUILDER));\n    return p.shift(), {\n      type: \"Tuple\",\n      members\n    };\n  },\n  func_call(p) {\n    let namespace = \"global\";\n    p.getMark().name === \"namespace\" && (p.shift(), namespace = p.processString());\n    const name = p.processString();\n    if (namespace === \"global\" && name === \"select\") {\n      const result = {\n        type: \"Select\",\n        alternatives: []\n      };\n      for (; p.getMark().name !== \"func_args_end\"; )\n        if (p.getMark().name === \"pair\") {\n          if (result.fallback) throw new GroqQueryError(\"unexpected argument to select()\");\n          p.shift();\n          const condition = p.process(EXPR_BUILDER), value = p.process(EXPR_BUILDER);\n          result.alternatives.push({\n            type: \"SelectAlternative\",\n            condition,\n            value\n          });\n        } else {\n          if (result.fallback) throw new GroqQueryError(\"unexpected argument to select()\");\n          const value = p.process(EXPR_BUILDER);\n          result.fallback = value;\n        }\n      return p.shift(), result;\n    }\n    const args = [];\n    for (; p.getMark().name !== \"func_args_end\"; )\n      argumentShouldBeSelector(namespace, name, args.length) ? (p.process(SELECTOR_BUILDER), args.push({ type: \"Selector\" })) : args.push(p.process(EXPR_BUILDER));\n    if (p.shift(), namespace === \"global\" && (name === \"before\" || name === \"after\") && p.parseOptions.mode === \"delta\")\n      return {\n        type: \"Context\",\n        key: name\n      };\n    if (namespace === \"global\" && name === \"boost\" && !p.allowBoost)\n      throw new GroqQueryError(\"unexpected boost\");\n    const funcs = namespaces[namespace];\n    if (!funcs)\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`);\n    const func = funcs[name];\n    if (!func)\n      throw new GroqQueryError(`Undefined function: ${name}`);\n    if (func.arity !== void 0 && validateArity(name, func.arity, args.length), func.mode !== void 0 && func.mode !== p.parseOptions.mode)\n      throw new GroqQueryError(`Undefined function: ${name}`);\n    return {\n      type: \"FuncCall\",\n      func,\n      namespace,\n      name,\n      args\n    };\n  },\n  pipecall(p) {\n    const base = p.process(EXPR_BUILDER);\n    p.shift();\n    let namespace = \"global\";\n    if (p.getMark().name === \"namespace\" && (p.shift(), namespace = p.processString()), namespace !== \"global\")\n      throw new GroqQueryError(`Undefined namespace: ${namespace}`);\n    const name = p.processString(), args = [], oldAllowBoost = p.allowBoost;\n    for (name === \"score\" && (p.allowBoost = !0); ; ) {\n      const markName = p.getMark().name;\n      if (markName === \"func_args_end\")\n        break;\n      if (name === \"order\") {\n        if (markName === \"asc\") {\n          p.shift(), args.push({ type: \"Asc\", base: p.process(EXPR_BUILDER) });\n          continue;\n        } else if (markName === \"desc\") {\n          p.shift(), args.push({ type: \"Desc\", base: p.process(EXPR_BUILDER) });\n          continue;\n        }\n      }\n      args.push(p.process(EXPR_BUILDER));\n    }\n    p.shift(), p.allowBoost = oldAllowBoost;\n    const func = pipeFunctions[name];\n    if (!func)\n      throw new GroqQueryError(`Undefined pipe function: ${name}`);\n    return func.arity && validateArity(name, func.arity, args.length), {\n      type: \"PipeFuncCall\",\n      func,\n      base,\n      name,\n      args\n    };\n  },\n  pair() {\n    throw new GroqQueryError(\"unexpected =>\");\n  },\n  and(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"And\",\n      left,\n      right\n    };\n  },\n  or(p) {\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER);\n    return {\n      type: \"Or\",\n      left,\n      right\n    };\n  },\n  not(p) {\n    return {\n      type: \"Not\",\n      base: p.process(EXPR_BUILDER)\n    };\n  },\n  asc() {\n    throw new GroqQueryError(\"unexpected asc\");\n  },\n  desc() {\n    throw new GroqQueryError(\"unexpected desc\");\n  },\n  param(p) {\n    const name = p.processString();\n    return p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name) ? {\n      type: \"Value\",\n      value: p.parseOptions.params[name]\n    } : {\n      type: \"Parameter\",\n      name\n    };\n  }\n}, OBJECT_BUILDER = {\n  object_expr(p) {\n    if (p.getMark().name === \"pair\") {\n      p.shift();\n      const condition = p.process(EXPR_BUILDER), value2 = p.process(EXPR_BUILDER);\n      return {\n        type: \"ObjectConditionalSplat\",\n        condition,\n        value: value2\n      };\n    }\n    const value = p.process(EXPR_BUILDER);\n    return {\n      type: \"ObjectAttributeValue\",\n      name: extractPropertyKey(value),\n      value\n    };\n  },\n  object_pair(p) {\n    const name = p.process(EXPR_BUILDER);\n    if (name.type !== \"Value\") throw new Error(\"name must be string\");\n    const value = p.process(EXPR_BUILDER);\n    return {\n      type: \"ObjectAttributeValue\",\n      name: name.value,\n      value\n    };\n  },\n  object_splat(p) {\n    return {\n      type: \"ObjectSplat\",\n      value: p.process(EXPR_BUILDER)\n    };\n  },\n  object_splat_this() {\n    return {\n      type: \"ObjectSplat\",\n      value: { type: \"This\" }\n    };\n  }\n}, TRAVERSE_BUILDER = {\n  square_bracket(p) {\n    const expr = p.process(EXPR_BUILDER), value = tryConstantEvaluate(expr);\n    return value && value.type === \"number\" ? (right) => traverseElement((base) => ({ type: \"AccessElement\", base, index: value.data }), right) : value && value.type === \"string\" ? (right) => traversePlain((base) => ({ type: \"AccessAttribute\", base, name: value.data }), right) : (right) => traverseArray(\n      (base) => ({\n        type: \"Filter\",\n        base,\n        expr\n      }),\n      right\n    );\n  },\n  slice(p) {\n    const isInclusive = p.getMark().name === \"inc_range\";\n    p.shift();\n    const left = p.process(EXPR_BUILDER), right = p.process(EXPR_BUILDER), leftValue = tryConstantEvaluate(left), rightValue = tryConstantEvaluate(right);\n    if (!leftValue || !rightValue || leftValue.type !== \"number\" || rightValue.type !== \"number\")\n      throw new GroqQueryError(\"slicing must use constant numbers\");\n    return (rhs) => traverseArray(\n      (base) => ({\n        type: \"Slice\",\n        base,\n        left: leftValue.data,\n        right: rightValue.data,\n        isInclusive\n      }),\n      rhs\n    );\n  },\n  projection(p) {\n    const obj = p.process(EXPR_BUILDER);\n    return (right) => traverseProjection((base) => ({ type: \"Projection\", base, expr: obj }), right);\n  },\n  attr_access(p) {\n    const name = p.processString();\n    return (right) => traversePlain((base) => ({ type: \"AccessAttribute\", base, name }), right);\n  },\n  deref(p) {\n    let attr = null;\n    p.getMark().name === \"deref_attr\" && (p.shift(), attr = p.processString());\n    const wrap = (base) => attr ? { type: \"AccessAttribute\", base, name: attr } : base;\n    return (right) => traversePlain(\n      (base) => wrap({\n        type: \"Deref\",\n        base\n      }),\n      right\n    );\n  },\n  array_postfix() {\n    return (right) => traverseArray((base) => ({ type: \"ArrayCoerce\", base }), right);\n  }\n}, SELECTOR_BUILDER = {\n  group(p) {\n    return p.process(SELECTOR_BUILDER), null;\n  },\n  everything() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  this() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  parent() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  dblparent() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  traverse(p) {\n    for (p.process(SELECTOR_BUILDER); p.getMark().name !== \"traversal_end\"; )\n      p.process(TRAVERSE_BUILDER);\n    return p.shift(), null;\n  },\n  this_attr(p) {\n    return p.processString(), null;\n  },\n  neg() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  pos() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  add() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  sub() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  mul() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  div() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  mod() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  pow() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  comp() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  in_range() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  str() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  integer() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  float() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  sci() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  object() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  array() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  tuple() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  func_call(p, mark) {\n    const func = EXPR_BUILDER.func_call(p, mark);\n    if (func.name === \"anywhere\" && func.args.length === 1) return null;\n    throw new Error(\"Invalid selector syntax\");\n  },\n  pipecall() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  pair() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  and() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  or() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  not() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  asc() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  desc() {\n    throw new Error(\"Invalid selector syntax\");\n  },\n  param() {\n    throw new Error(\"Invalid selector syntax\");\n  }\n};\nfunction extractPropertyKey(node) {\n  if (node.type === \"AccessAttribute\" && !node.base)\n    return node.name;\n  if (node.type === \"Deref\" || node.type === \"Map\" || node.type === \"Projection\" || node.type === \"Slice\" || node.type === \"Filter\" || node.type === \"AccessElement\" || node.type === \"ArrayCoerce\")\n    return extractPropertyKey(node.base);\n  throw new GroqQueryError(`Cannot determine property key for type: ${node.type}`);\n}\nfunction validateArity(name, arity, count) {\n  if (typeof arity == \"number\") {\n    if (count !== arity)\n      throw new GroqQueryError(\n        `Incorrect number of arguments to function ${name}(). Expected ${arity}, got ${count}.`\n      );\n  } else if (arity && !arity(count))\n    throw new GroqQueryError(`Incorrect number of arguments to function ${name}().`);\n}\nfunction argumentShouldBeSelector(namespace, functionName, argCount) {\n  const functionsRequiringSelectors = [\"changedAny\", \"changedOnly\"];\n  return namespace == \"diff\" && argCount == 2 && functionsRequiringSelectors.includes(functionName);\n}\nclass GroqSyntaxError extends Error {\n  constructor(position) {\n    super(`Syntax error in GROQ query at position ${position}`), __publicField$1(this, \"position\"), __publicField$1(this, \"name\", \"GroqSyntaxError\"), this.position = position;\n  }\n}\nfunction parse(input, options = {}) {\n  const result = parse$1(input);\n  if (result.type === \"error\")\n    throw new GroqSyntaxError(result.position);\n  return new MarkProcessor(input, result.marks, options).process(EXPR_BUILDER);\n}\nconst { compare } = new Intl.Collator(\"en\");\nfunction typeNodesSorter(a, b) {\n  return a.type === \"null\" ? 1 : compare(hashField(a), hashField(b));\n}\nfunction hashField(field) {\n  switch (field.type) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return field.value !== void 0 ? `${field.type}(${field.value})` : `${field.type}`;\n    case \"null\":\n    case \"unknown\":\n      return field.type;\n    case \"array\":\n      return `${field.type}(${hashField(field.of)})`;\n    case \"object\": {\n      const attributes = Object.entries(field.attributes);\n      return attributes.sort(([a], [b]) => compare(a, b)), `${field.type}:(${attributes.map(\n        ([key, value]) => `${key}:${hashField(value.value)}(${value.optional ? \"optional\" : \"non-optional\"})`\n      ).join(\",\")}):ref-${field.dereferencesTo}:${field.rest ? hashField(field.rest) : \"no-rest\"}`;\n    }\n    case \"union\": {\n      const sorted = [...field.of];\n      return sorted.sort(typeNodesSorter), `${field.type}(${sorted.map(hashField).join(\",\")})`;\n    }\n    case \"inline\":\n      return `${field.type}(${field.name})`;\n    default:\n      return field.type;\n  }\n}\nfunction removeDuplicateTypeNodes(typeNodes) {\n  const seenTypes = /* @__PURE__ */ new Set(), newTypeNodes = [], sortedTypeNodes = [...typeNodes];\n  sortedTypeNodes.sort(typeNodesSorter);\n  for (const typeNode of sortedTypeNodes) {\n    const hash = hashField(typeNode);\n    if (hash === null) {\n      newTypeNodes.push(typeNode);\n      continue;\n    }\n    seenTypes.has(hash) || (seenTypes.add(hash), newTypeNodes.push(typeNode));\n  }\n  return newTypeNodes;\n}\nfunction optimizeUnions(field) {\n  if (field.type === \"union\") {\n    if (field.of.length === 0)\n      return field;\n    if (field.of = removeDuplicateTypeNodes(field.of), field.of.length === 1)\n      return optimizeUnions(field.of[0]);\n    for (let idx = 0; field.of.length > idx; idx++) {\n      const subField = field.of[idx];\n      if (subField.type === \"union\") {\n        field.of.splice(idx, 1, ...subField.of), idx--;\n        continue;\n      }\n      field.of[idx] = optimizeUnions(subField);\n    }\n    return field.of.sort((a, b) => a.type === \"null\" ? 1 : compare(hashField(a), hashField(b))), field;\n  }\n  if (field.type === \"array\")\n    return field.of = optimizeUnions(field.of), field;\n  if (field.type === \"object\") {\n    for (const idx in field.attributes)\n      Object.hasOwn(field.attributes, idx) && (field.attributes[idx].value = optimizeUnions(field.attributes[idx].value));\n    return field;\n  }\n  return field;\n}\nfunction createReferenceTypeNode(name, inArray = !1) {\n  const attributes = {\n    _ref: {\n      type: \"objectAttribute\",\n      value: {\n        type: \"string\"\n      }\n    },\n    _type: {\n      type: \"objectAttribute\",\n      value: {\n        type: \"string\",\n        value: \"reference\"\n      }\n    },\n    _weak: {\n      type: \"objectAttribute\",\n      value: {\n        type: \"boolean\"\n      },\n      optional: !0\n    }\n  };\n  return inArray && (attributes._key = {\n    type: \"objectAttribute\",\n    value: {\n      type: \"string\"\n    }\n  }), {\n    type: \"object\",\n    attributes,\n    dereferencesTo: name\n  };\n}\nfunction nullUnion(node) {\n  return node.type === \"union\" ? unionOf(...node.of, { type: \"null\" }) : unionOf(node, { type: \"null\" });\n}\nfunction unionOf(...nodes) {\n  return {\n    type: \"union\",\n    of: nodes\n  };\n}\nfunction resolveInline(node, scope) {\n  if (node.type === \"inline\") {\n    const resolvedInline = scope.context.lookupTypeDeclaration(node);\n    return resolveInline(resolvedInline, scope);\n  }\n  return node;\n}\nfunction mapNode(node, scope, mapper, mergeUnions = (nodes) => optimizeUnions({ type: \"union\", of: nodes })) {\n  switch (node.type) {\n    case \"boolean\":\n    case \"array\":\n    case \"null\":\n    case \"object\":\n    case \"string\":\n    case \"number\":\n    case \"unknown\":\n      return mapper(node);\n    case \"union\":\n      return mergeUnions(node.of.map((inner) => mapNode(inner, scope, mapper), mergeUnions));\n    case \"inline\": {\n      const resolvedInline = resolveInline(node, scope);\n      return mapNode(resolvedInline, scope, mapper, mergeUnions);\n    }\n    default:\n      throw new Error(`Unknown type: ${node.type}`);\n  }\n}\nfunction isFuncCall(node, name) {\n  return node.type === \"Group\" ? isFuncCall(node.base, name) : node.type === \"FuncCall\" && `${node.namespace}::${node.name}` === name;\n}\nfunction booleanValue(node, scope) {\n  switch (node.type) {\n    case \"unknown\":\n      return { canBeTrue: !0, canBeFalse: !0, canBeNull: !0 };\n    case \"boolean\":\n      return node.value === !0 ? { canBeTrue: !0, canBeFalse: !1, canBeNull: !1 } : node.value === !1 ? { canBeTrue: !1, canBeFalse: !0, canBeNull: !1 } : { canBeTrue: !0, canBeFalse: !0, canBeNull: !1 };\n    case \"union\": {\n      const value = { canBeTrue: !1, canBeFalse: !1, canBeNull: !1 };\n      for (const sub of node.of) {\n        const match2 = booleanValue(sub, scope);\n        match2.canBeNull && (value.canBeNull = !0), match2.canBeTrue && (value.canBeTrue = !0), match2.canBeFalse && (value.canBeFalse = !0);\n      }\n      return value;\n    }\n    case \"inline\": {\n      const resolved = resolveInline(node, scope);\n      return booleanValue(resolved, scope);\n    }\n    case \"null\":\n    case \"string\":\n    case \"number\":\n    case \"object\":\n    case \"array\":\n      return { canBeTrue: !1, canBeFalse: !1, canBeNull: !0 };\n    default:\n      throw new Error(`unknown node type ${node.type}`);\n  }\n}\nfunction booleanOr(left, right) {\n  return left.canBeTrue && !left.canBeFalse && !left.canBeNull ? left : right.canBeTrue && !right.canBeFalse && !right.canBeNull ? right : {\n    // Either side can be true for the expression to be true\n    canBeTrue: left.canBeTrue || right.canBeTrue,\n    // Both sides must be false for the expression to be false\n    canBeFalse: left.canBeFalse && right.canBeFalse,\n    // if either side can be null, the expression can be null if the other side can't only be true\n    canBeNull: left.canBeNull || right.canBeNull\n  };\n}\nfunction booleanAnd(left, right) {\n  return left.canBeFalse && !left.canBeTrue && !left.canBeNull ? left : right.canBeFalse && !right.canBeTrue && !right.canBeNull ? right : {\n    // Both sides must be true for the expression to be true\n    canBeTrue: left.canBeTrue && right.canBeTrue,\n    // if either side can be false, the expression can be false\n    canBeFalse: left.canBeFalse || right.canBeFalse,\n    // if either side can be null, the expression can be null\n    canBeNull: left.canBeNull || right.canBeNull\n  };\n}\nfunction booleanInterpretationToTypeNode(bool) {\n  return bool.canBeTrue ? bool.canBeFalse ? bool.canBeNull ? nullUnion({ type: \"boolean\" }) : { type: \"boolean\" } : bool.canBeNull ? nullUnion({ type: \"boolean\", value: !0 }) : { type: \"boolean\", value: !0 } : bool.canBeFalse ? bool.canBeNull ? nullUnion({ type: \"boolean\", value: !1 }) : { type: \"boolean\", value: !1 } : { type: \"null\" };\n}\nvar __defProp = Object.defineProperty, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nconst $trace$1 = debug__WEBPACK_IMPORTED_MODULE_0__(\"typeEvaluator:scope:trace\");\n$trace$1.log = console.log.bind(console);\nclass Context {\n  constructor(schema) {\n    __publicField(this, \"schema\"), this.schema = schema;\n  }\n  lookupRef(refTo) {\n    for (const val of this.schema)\n      if (val.type === \"document\" && val.name === refTo)\n        return {\n          type: \"object\",\n          attributes: val.attributes\n        };\n    return { type: \"null\" };\n  }\n  lookupTypeDeclaration(alias) {\n    for (const val of this.schema)\n      if (val.type === \"type\" && val.name === alias.name)\n        return val.value;\n    return { type: \"null\" };\n  }\n}\nclass Scope2 {\n  constructor(value, parent, context) {\n    __publicField(this, \"value\"), __publicField(this, \"parent\"), __publicField(this, \"context\"), __publicField(this, \"isHidden\"), this.value = { type: \"union\", of: value }, this.parent = parent, this.context = context || (parent == null ? void 0 : parent.context) || new Context([]), this.isHidden = !1;\n  }\n  createNested(value) {\n    return this.isHidden ? new Scope2(value, this.parent, this.context) : new Scope2(value, this, this.context);\n  }\n  createHidden(value) {\n    const result = this.createNested(value);\n    return result.isHidden = !0, result;\n  }\n}\nfunction unionWithoutNull(unionTypeNode) {\n  return unionTypeNode.type === \"union\" ? {\n    type: \"union\",\n    of: unionTypeNode.of.filter((type) => type.type !== \"null\")\n  } : unionTypeNode;\n}\nfunction handleFuncCallNode(node, scope) {\n  switch (`${node.namespace}.${node.name}`) {\n    case \"array.compact\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => {\n        if (arg2.type === \"unknown\")\n          return nullUnion({ type: \"array\", of: { type: \"unknown\" } });\n        if (arg2.type !== \"array\")\n          return { type: \"null\" };\n        const of = mapNode(arg2.of, scope, (of2) => of2);\n        return {\n          type: \"array\",\n          of: unionWithoutNull(of)\n        };\n      });\n    }\n    case \"array.join\": {\n      const arrayArg = walk({ node: node.args[0], scope }), sepArg = walk({ node: node.args[1], scope });\n      return mapNode(\n        arrayArg,\n        scope,\n        (arrayArg2) => mapNode(sepArg, scope, (sepArg2) => arrayArg2.type === \"unknown\" || sepArg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arrayArg2.type !== \"array\" || sepArg2.type !== \"string\" ? { type: \"null\" } : mapNode(arrayArg2.of, scope, (of) => of.type === \"unknown\" ? nullUnion({ type: \"string\" }) : of.type !== \"string\" && of.type !== \"number\" && of.type !== \"boolean\" ? { type: \"null\" } : { type: \"string\" }))\n      );\n    }\n    case \"array.unique\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"array\", of: { type: \"unknown\" } }) : arg2.type !== \"array\" ? { type: \"null\" } : arg2);\n    }\n    case \"global.lower\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arg2.type !== \"string\" ? { type: \"null\" } : arg2.value !== void 0 ? {\n        type: \"string\",\n        value: arg2.value.toLowerCase()\n      } : { type: \"string\" });\n    }\n    case \"global.upper\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arg2.type !== \"string\" ? { type: \"null\" } : arg2.value !== void 0 ? {\n        type: \"string\",\n        value: arg2.value.toUpperCase()\n      } : { type: \"string\" });\n    }\n    case \"dateTime.now\":\n      return { type: \"string\" };\n    case \"global.now\":\n      return { type: \"string\" };\n    case \"global.defined\":\n      return { type: \"boolean\" };\n    case \"global.path\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arg2.type === \"string\" ? { type: \"string\" } : { type: \"null\" });\n    }\n    case \"global.coalesce\": {\n      if (node.args.length === 0)\n        return { type: \"null\" };\n      const typeNodes = [];\n      let canBeNull = !0;\n      for (const arg of node.args) {\n        const type = walk({ node: arg, scope });\n        typeNodes.push(unionWithoutNull(type)), canBeNull = type.type === \"null\" || type.type === \"union\" && type.of.some((t) => t.type === \"null\");\n      }\n      return canBeNull && typeNodes.push({ type: \"null\" }), {\n        type: \"union\",\n        of: typeNodes\n      };\n    }\n    case \"global.count\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arg2.type === \"array\" ? { type: \"number\" } : { type: \"null\" });\n    }\n    case \"global.dateTime\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : arg2.type === \"string\" ? nullUnion({ type: \"string\" }) : { type: \"null\" });\n    }\n    case \"global.length\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (arg2) => arg2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : arg2.type === \"array\" || arg2.type === \"string\" ? { type: \"number\" } : { type: \"null\" });\n    }\n    case \"global.references\":\n      return { type: \"boolean\" };\n    case \"global.round\": {\n      const numNode = walk({ node: node.args[0], scope });\n      return mapNode(numNode, scope, (num) => {\n        if (num.type === \"unknown\")\n          return nullUnion({ type: \"number\" });\n        if (num.type !== \"number\")\n          return { type: \"null\" };\n        if (node.args.length === 2) {\n          const precisionNode = walk({ node: node.args[1], scope });\n          return mapNode(precisionNode, scope, (precision) => precision.type === \"unknown\" ? nullUnion({ type: \"number\" }) : precision.type !== \"number\" ? { type: \"null\" } : { type: \"number\" });\n        }\n        return { type: \"number\" };\n      });\n    }\n    case \"global.string\": {\n      const arg = walk({ node: node.args[0], scope });\n      return mapNode(arg, scope, (node2) => node2.type === \"unknown\" ? nullUnion({ type: \"string\" }) : node2.type === \"string\" || node2.type === \"number\" || node2.type === \"boolean\" ? node2.value ? {\n        type: \"string\",\n        value: node2.value.toString()\n      } : {\n        type: \"string\"\n      } : { type: \"null\" });\n    }\n    case \"math.sum\": {\n      const values = walk({ node: node.args[0], scope });\n      return mapNode(values, scope, (node2) => node2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node2.type !== \"array\" ? { type: \"null\" } : mapNode(node2.of, scope, (node3) => node3.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node3.type === \"number\" || node3.type === \"null\" ? { type: \"number\" } : { type: \"null\" }));\n    }\n    case \"math.avg\": {\n      const values = walk({ node: node.args[0], scope });\n      return mapNode(values, scope, (node2) => node2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node2.type !== \"array\" ? { type: \"null\" } : mapNode(node2.of, scope, (node3) => node3.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node3.type === \"number\" ? { type: \"number\" } : { type: \"null\" }));\n    }\n    case \"math.max\":\n    case \"math.min\": {\n      const values = walk({ node: node.args[0], scope });\n      return mapNode(values, scope, (node2) => node2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node2.type !== \"array\" ? { type: \"null\" } : mapNode(node2.of, scope, (node3) => node3.type === \"unknown\" ? nullUnion({ type: \"number\" }) : node3.type === \"number\" ? node3 : { type: \"null\" }));\n    }\n    case \"pt.text\":\n      return node.args.length === 0 ? { type: \"null\" } : {\n        type: \"string\"\n      };\n    case \"string.startsWith\": {\n      const strTypeNode = walk({ node: node.args[0], scope }), prefixTypeNode = walk({ node: node.args[1], scope });\n      return mapNode(strTypeNode, scope, (strNode) => mapNode(prefixTypeNode, scope, (prefixNode) => strNode.type === \"unknown\" || prefixNode.type === \"unknown\" ? nullUnion({ type: \"boolean\" }) : strNode.type !== \"string\" || prefixNode.type !== \"string\" ? { type: \"null\" } : { type: \"boolean\" }));\n    }\n    case \"string.split\": {\n      const strTypeNode = walk({ node: node.args[0], scope }), sepTypeNode = walk({ node: node.args[1], scope });\n      return mapNode(strTypeNode, scope, (strNode) => mapNode(sepTypeNode, scope, (sepNode) => strNode.type === \"unknown\" || sepNode.type === \"unknown\" ? nullUnion({ type: \"array\", of: { type: \"string\" } }) : strNode.type !== \"string\" || sepNode.type !== \"string\" ? { type: \"null\" } : { type: \"array\", of: { type: \"string\" } }));\n    }\n    case \"sanity.versionOf\": {\n      const typeNode = walk({ node: node.args[0], scope });\n      return mapNode(typeNode, scope, (typeNode2) => typeNode2.type === \"unknown\" ? nullUnion({ type: \"array\", of: { type: \"string\" } }) : typeNode2.type !== \"string\" ? { type: \"null\" } : { type: \"array\", of: { type: \"string\" } });\n    }\n    case \"sanity.documentsOf\": {\n      const typeNode = walk({ node: node.args[0], scope });\n      return mapNode(typeNode, scope, (typeNode2) => typeNode2.type === \"unknown\" ? nullUnion({ type: \"array\", of: { type: \"string\" } }) : typeNode2.type !== \"string\" ? { type: \"null\" } : { type: \"array\", of: { type: \"string\" } });\n    }\n    default:\n      return { type: \"unknown\" };\n  }\n}\nfunction match(left, right) {\n  let tokens = [], patterns = [];\n  if (left.type === \"string\") {\n    if (left.value === void 0)\n      return;\n    tokens = tokens.concat(matchTokenize(left.value));\n  }\n  if (left.type === \"array\") {\n    if (left.of.type === \"unknown\")\n      return;\n    if (left.of.type === \"string\") {\n      if (left.of.value === void 0)\n        return;\n      tokens = tokens.concat(matchTokenize(left.of.value));\n    }\n    if (left.of.type === \"union\")\n      for (const node of left.of.of)\n        node.type === \"string\" && node.value !== void 0 && (tokens = tokens.concat(matchTokenize(node.value)));\n  }\n  if (right.type === \"string\") {\n    if (right.value === void 0)\n      return;\n    patterns = patterns.concat(matchAnalyzePattern(right.value));\n  }\n  if (right.type === \"array\") {\n    if (right.of.type === \"unknown\")\n      return;\n    if (right.of.type === \"string\") {\n      if (right.of.value === void 0)\n        return;\n      patterns = patterns.concat(matchAnalyzePattern(right.of.value));\n    }\n    if (right.of.type === \"union\")\n      for (const node of right.of.of) {\n        if (node.type === \"string\") {\n          if (node.value === void 0)\n            return;\n          patterns = patterns.concat(matchAnalyzePattern(node.value));\n        }\n        if (node.type !== \"string\")\n          return !1;\n      }\n  }\n  return matchText(tokens, patterns);\n}\nconst $trace = debug__WEBPACK_IMPORTED_MODULE_0__(\"typeEvaluator:evaluate:trace\");\n$trace.log = console.log.bind(console);\nconst $debug = debug__WEBPACK_IMPORTED_MODULE_0__(\"typeEvaluator:evaluate:debug\");\n$debug.log = console.log.bind(console);\nconst $warn = debug__WEBPACK_IMPORTED_MODULE_0__(\"typeEvaluator:evaluate:warn\");\nfunction typeEvaluate(ast, schema) {\n  $debug(\"evaluateQueryType.ast %O\", ast), $debug(\"evaluateQueryType.schema %O\", schema);\n  const parsed = walk({\n    node: ast,\n    scope: new Scope2([], void 0, new Context(schema))\n  });\n  $trace(\"evaluateQueryType.parsed %O\", parsed);\n  const optimized = optimizeUnions(parsed);\n  return $debug(\"evaluateQueryType.optimized %O\", optimized), optimized;\n}\nfunction mapDeref(base, scope) {\n  return base.type === \"union\" ? {\n    type: \"union\",\n    of: base.of.map((node) => mapDeref(node, scope))\n  } : base.type === \"array\" ? {\n    type: \"array\",\n    of: mapDeref(base.of, scope)\n  } : base.type === \"object\" && base.dereferencesTo !== void 0 ? scope.context.lookupRef(base.dereferencesTo) : { type: \"null\" };\n}\nfunction handleDerefNode(node, scope) {\n  $trace(\"deref.node %O\", node);\n  const base = walk({ node: node.base, scope });\n  if ($trace(\"deref.base %O\", base), base.type === \"null\" || base.type === \"unknown\")\n    return { type: \"null\" };\n  const derefedNode = mapDeref(base, scope);\n  return $trace(\"deref.derefedNode %O\", derefedNode), derefedNode;\n}\nfunction handleObjectSplatNode(attr, scope) {\n  const value = walk({ node: attr.value, scope });\n  return $trace(\"object.splat.value %O\", value), mapNode(value, scope, (node) => {\n    if (node.type === \"unknown\")\n      return { type: \"unknown\" };\n    if (node.type !== \"object\")\n      return { type: \"object\", attributes: {} };\n    const attributes = {};\n    for (const name in node.attributes)\n      node.attributes.hasOwnProperty(name) && (attributes[name] = node.attributes[name]);\n    if (node.rest !== void 0) {\n      const resolvedRest = resolveInline(node.rest, scope);\n      if (resolvedRest.type === \"unknown\")\n        return { type: \"unknown\" };\n      if (resolvedRest.type !== \"object\")\n        return { type: \"null\" };\n      for (const name in resolvedRest.attributes)\n        resolvedRest.attributes.hasOwnProperty(name) && (attributes[name] = resolvedRest.attributes[name]);\n    }\n    return { type: \"object\", attributes };\n  });\n}\nfunction handleObjectNode(node, scope) {\n  if ($trace(\"object.node %O\", node), node.attributes.length === 0)\n    return {\n      type: \"object\",\n      attributes: {}\n    };\n  const objectAttributes = [], splatVariants = [], conditionalVariants = [];\n  for (const [idx, attr] of node.attributes.entries()) {\n    if (attr.type === \"ObjectAttributeValue\") {\n      const attributeNode = walk({ node: attr.value, scope });\n      objectAttributes.push([\n        idx,\n        attr.name,\n        {\n          type: \"objectAttribute\",\n          value: attributeNode\n        }\n      ]);\n      continue;\n    }\n    if (attr.type === \"ObjectSplat\") {\n      const attributeNode = handleObjectSplatNode(attr, scope);\n      switch ($trace(\"object.splat.result %O\", attributeNode), attributeNode.type) {\n        case \"object\": {\n          splatVariants.push([idx, attributeNode]);\n          continue;\n        }\n        case \"union\": {\n          for (const node2 of attributeNode.of)\n            if (node2.type === \"unknown\")\n              return node2;\n          splatVariants.push([idx, attributeNode]);\n          continue;\n        }\n        default:\n          return { type: \"unknown\" };\n      }\n    }\n    if (attr.type === \"ObjectConditionalSplat\") {\n      const condition = booleanValue(walk({ node: attr.condition, scope }), scope);\n      if ($trace(\"object.conditional.splat.condition %O\", condition), condition.canBeTrue === !1)\n        continue;\n      const attributeNode = handleObjectSplatNode(attr, scope);\n      if ($trace(\"object.conditional.splat.result %O\", attributeNode), condition.canBeFalse === !1 && condition.canBeNull === !1)\n        switch (attributeNode.type) {\n          case \"object\": {\n            splatVariants.push([idx, attributeNode]);\n            continue;\n          }\n          case \"union\": {\n            for (const node2 of attributeNode.of)\n              if (node2.type !== \"object\")\n                return { type: \"unknown\" };\n            splatVariants.push([idx, attributeNode]);\n            continue;\n          }\n          default:\n            return { type: \"unknown\" };\n        }\n      const variant = mapNode(attributeNode, scope, (attributeNode2) => ($trace(\"object.conditional.splat.result.concrete %O\", attributeNode2), attributeNode2.type !== \"object\" ? { type: \"unknown\" } : {\n        type: \"object\",\n        attributes: attributeNode2.attributes\n      }));\n      if (variant.type === \"union\") {\n        for (const node2 of variant.of)\n          if (node2.type !== \"object\")\n            return { type: \"unknown\" };\n        variant.of.push({ type: \"object\", attributes: {} }), conditionalVariants.push([idx, variant]);\n        continue;\n      }\n      if (variant.type !== \"object\")\n        return { type: \"unknown\" };\n      conditionalVariants.push([\n        idx,\n        {\n          type: \"union\",\n          of: [{ type: \"object\", attributes: {} }, variant]\n        }\n      ]);\n      continue;\n    }\n    throw new Error(`Unknown object attribute type: ${attr.type}`);\n  }\n  const guaranteedAttributes = [];\n  guaranteedAttributes.push(...objectAttributes);\n  for (const [idx, splatNode] of splatVariants) {\n    if (splatNode.type === \"object\") {\n      for (const name in splatNode.attributes) {\n        if (!splatNode.attributes.hasOwnProperty(name))\n          continue;\n        const attribute = splatNode.attributes[name];\n        guaranteedAttributes.push([idx, name, attribute]);\n      }\n      continue;\n    }\n    conditionalVariants.push([idx, splatNode]);\n  }\n  if (guaranteedAttributes.sort(([a], [b]) => a - b), conditionalVariants.length === 0)\n    return {\n      type: \"object\",\n      attributes: Object.fromEntries(\n        guaranteedAttributes.map(([, name, attribute]) => [name, attribute])\n      )\n    };\n  const matrix = [];\n  for (const [unionIdx, union] of conditionalVariants) {\n    const unionGuaranteedBefore = [], unionGuaranteedAfter = [];\n    for (const [guaranteedIndex, name, attribute] of guaranteedAttributes)\n      guaranteedIndex < unionIdx && unionGuaranteedBefore.push([guaranteedIndex, name, attribute]), guaranteedIndex > unionIdx && unionGuaranteedAfter.push([guaranteedIndex, name, attribute]);\n    const allVariantsAttributes = [];\n    for (const [conditionalVariantIdx, otherUnion] of conditionalVariants) {\n      const variantAttributes = [];\n      for (const node2 of otherUnion.of)\n        variantAttributes.push(node2.attributes);\n      allVariantsAttributes.push([conditionalVariantIdx, variantAttributes]);\n    }\n    for (const node2 of union.of) {\n      matrix.push({\n        type: \"object\",\n        attributes: {\n          ...Object.fromEntries(\n            unionGuaranteedBefore.map(([, name, attribute]) => [name, attribute])\n          ),\n          ...node2.attributes,\n          ...Object.fromEntries(\n            unionGuaranteedAfter.map(([, name, attribute]) => [name, attribute])\n          )\n        }\n      });\n      for (const [outerIdx, outerAttributes] of allVariantsAttributes)\n        for (const outer of outerAttributes)\n          for (const [innerIdx, innerAttributes] of allVariantsAttributes)\n            if (outerIdx !== innerIdx)\n              for (const inner of innerAttributes) {\n                const _before = [...unionGuaranteedBefore], _after = [...unionGuaranteedAfter];\n                for (const name in outer)\n                  outer.hasOwnProperty(name) && outerIdx !== unionIdx && (outerIdx < unionIdx && _before.push([outerIdx, name, outer[name]]), outerIdx > unionIdx && _after.push([outerIdx, name, outer[name]]));\n                for (const name in inner)\n                  inner.hasOwnProperty(name) && outerIdx !== unionIdx && (innerIdx < unionIdx && _before.push([innerIdx, name, inner[name]]), innerIdx > unionIdx && _after.push([innerIdx, name, inner[name]]));\n                _before.sort(([a], [b]) => a - b), _after.sort(([a], [b]) => a - b);\n                const before = Object.fromEntries(\n                  _before.map(([, name, attribute]) => [name, attribute])\n                ), after = Object.fromEntries(\n                  _after.map(([, name, attribute]) => [name, attribute])\n                );\n                matrix.push({\n                  type: \"object\",\n                  attributes: {\n                    ...before,\n                    ...node2.attributes,\n                    ...after\n                  }\n                });\n              }\n    }\n  }\n  return optimizeUnions({\n    type: \"union\",\n    of: matrix\n  });\n}\nfunction handleOpCallNode(node, scope) {\n  $trace(\"opcall.node %O\", node);\n  const lhs = walk({ node: node.left, scope }), rhs = walk({ node: node.right, scope });\n  return mapNode(\n    lhs,\n    scope,\n    (left) => (\n      // eslint-disable-next-line complexity, max-statements\n      mapNode(rhs, scope, (right) => {\n        switch ($trace('opcall.node.concrete \"%s\" %O', node.op, { left, right }), node.op) {\n          case \"==\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? { type: \"boolean\" } : left.type !== right.type ? {\n              type: \"boolean\",\n              value: !1\n            } : left.type === \"null\" ? {\n              type: \"boolean\",\n              value: !0\n            } : !isPrimitiveTypeNode(left) || !isPrimitiveTypeNode(right) ? {\n              type: \"boolean\",\n              value: !1\n            } : {\n              type: \"boolean\",\n              value: evaluateComparison(node.op, left, right)\n            };\n          case \"!=\": {\n            if (left.type === \"unknown\" || right.type === \"unknown\")\n              return { type: \"boolean\" };\n            if (left.type !== right.type)\n              return {\n                type: \"boolean\",\n                value: !0\n              };\n            if (left.type === \"null\")\n              return {\n                type: \"boolean\",\n                value: !1\n              };\n            if (!isPrimitiveTypeNode(left) || !isPrimitiveTypeNode(right))\n              return {\n                type: \"boolean\",\n                value: !0\n              };\n            let value = evaluateComparison(\"==\", left, right);\n            return value !== void 0 && (value = !value), {\n              type: \"boolean\",\n              value\n            };\n          }\n          case \">\":\n          case \">=\":\n          case \"<\":\n          case \"<=\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"boolean\" }) : left.type !== right.type ? { type: \"null\" } : !isPrimitiveTypeNode(left) || !isPrimitiveTypeNode(right) ? { type: \"null\" } : {\n              type: \"boolean\",\n              value: evaluateComparison(node.op, left, right)\n            };\n          case \"in\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"boolean\" }) : right.type !== \"array\" ? isFuncCall(node.right, \"global::path\") ? { type: \"boolean\" } : { type: \"null\" } : !isPrimitiveTypeNode(left) && left.type !== \"null\" ? {\n              type: \"boolean\",\n              value: !1\n            } : mapNode(right.of, scope, (arrayTypeNode) => arrayTypeNode.type === \"unknown\" ? nullUnion({ type: \"boolean\" }) : left.type === \"null\" ? {\n              type: \"boolean\",\n              value: arrayTypeNode.type === \"null\"\n            } : left.value === void 0 ? {\n              type: \"boolean\"\n            } : isPrimitiveTypeNode(arrayTypeNode) ? arrayTypeNode.value === void 0 ? {\n              type: \"boolean\"\n            } : {\n              type: \"boolean\",\n              value: left.value === arrayTypeNode.value\n            } : {\n              type: \"boolean\",\n              value: !1\n            });\n          case \"match\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? { type: \"boolean\" } : {\n              type: \"boolean\",\n              value: match(left, right)\n            };\n          case \"+\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? { type: \"unknown\" } : left.type === \"string\" && right.type === \"string\" ? {\n              type: \"string\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value + right.value : void 0\n            } : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value + right.value : void 0\n            } : left.type === \"array\" && right.type === \"array\" ? {\n              type: \"array\",\n              of: {\n                type: \"union\",\n                of: [left.of, right.of]\n              }\n            } : left.type === \"object\" && right.type === \"object\" ? {\n              type: \"object\",\n              attributes: { ...left.attributes, ...right.attributes }\n            } : { type: \"null\" };\n          case \"-\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"number\" }) : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value - right.value : void 0\n            } : { type: \"null\" };\n          case \"*\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"number\" }) : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value * right.value : void 0\n            } : { type: \"null\" };\n          case \"/\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"number\" }) : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value / right.value : void 0\n            } : { type: \"null\" };\n          case \"**\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"number\" }) : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value ** right.value : void 0\n            } : { type: \"null\" };\n          case \"%\":\n            return left.type === \"unknown\" || right.type === \"unknown\" ? nullUnion({ type: \"number\" }) : left.type === \"number\" && right.type === \"number\" ? {\n              type: \"number\",\n              value: left.value !== void 0 && right.value !== void 0 ? left.value % right.value : void 0\n            } : { type: \"null\" };\n          default:\n            return {\n              type: \"unknown\"\n            };\n        }\n      })\n    )\n  );\n}\nfunction handleSelectNode(node, scope) {\n  const values = [];\n  let guaranteed = !1;\n  for (const alternative of node.alternatives) {\n    const conditionValue = walk({ node: alternative.condition, scope }), conditionScope = resolveFilter(alternative.condition, scope);\n    conditionScope.type === \"union\" && conditionScope.of.length > 0 && values.push(walk({ node: alternative.value, scope: scope.createHidden(conditionScope.of) })), conditionValue.type === \"boolean\" && conditionValue.value === !0 && (guaranteed = !0);\n  }\n  return node.fallback && !guaranteed && values.push(walk({ node: node.fallback, scope })), values.length === 0 ? { type: \"null\" } : {\n    type: \"union\",\n    of: values\n  };\n}\nfunction handleArrayCoerceNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return $trace(\"arrayCoerce.base %O\", base), mapArray(base, scope, (base2) => base2);\n}\nfunction handleFlatMap(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return mapArray(base, scope, (base2) => {\n    const inner = walk({ node: node.expr, scope: scope.createHidden([base2.of]) });\n    return mapNode(\n      inner,\n      scope,\n      (inner2) => inner2.type === \"array\" ? inner2 : { type: \"array\", of: inner2 },\n      (nodes) => {\n        const inner2 = [];\n        for (const node2 of nodes) {\n          if (node2.type === \"unknown\") return { type: \"array\", of: node2 };\n          if (node2.type !== \"array\") throw new Error(`Unexpected type: ${node2.type}`);\n          inner2.push(node2.of);\n        }\n        return {\n          type: \"array\",\n          of: optimizeUnions({ type: \"union\", of: inner2 })\n        };\n      }\n    );\n  });\n}\nfunction handleMap(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return $trace(\"map.base %O\", base), mapArray(base, scope, (base2) => ({\n    type: \"array\",\n    of: walk({ node: node.expr, scope: scope.createHidden([base2.of]) })\n  }));\n}\nfunction handleProjectionNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return $trace(\"projection.base %O\", base), mapObject(\n    base,\n    scope,\n    (base2) => walk({ node: node.expr, scope: scope.createNested([base2]) })\n  );\n}\nfunction createFilterScope(base, scope) {\n  return base.type === \"array\" ? base.of.type === \"union\" ? scope.createNested(base.of.of) : scope.createNested([base.of]) : scope.createNested([base]);\n}\nfunction handleFilterNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return $trace(\"filter.base %O\", base), mapNode(base, scope, (base2) => {\n    if ($trace(\"filter.resolving %O\", base2), base2.type === \"null\")\n      return base2;\n    const resolved = resolveFilter(node.expr, createFilterScope(base2, scope));\n    return $trace(\"filter.resolved %O\", resolved), {\n      type: \"array\",\n      of: resolved\n    };\n  });\n}\nfunction handleAccessAttributeNode(node, scope) {\n  let attributeBase = scope.value;\n  return node.base && (attributeBase = walk({ node: node.base, scope })), $trace(\"accessAttribute.base %s %O\", node.name, attributeBase), handleAccessAttributeBase(attributeBase, node.name, scope);\n}\nfunction handleAccessAttributeBase(base, name, scope) {\n  return mapObject(base, scope, (base2) => {\n    $trace('Looking for attribute \"%s\" in object %O', name, base2);\n    const attribute = base2.attributes[name];\n    return attribute !== void 0 ? ($debug(`accessAttribute.attribute found ${name} %O`, attribute), attribute.optional ? nullUnion(attribute.value) : attribute.value) : base2.rest ? handleAccessAttributeBase(base2.rest, name, scope) : ($warn(`attribute \"${name}\" not found in object`), { type: \"null\" });\n  });\n}\nfunction handleAccessElementNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return $trace(\"accessElement.base %O\", base), mapArray(base, scope, (base2) => nullUnion(base2.of));\n}\nfunction handleArrayNode(node, scope) {\n  const of = [];\n  for (const el of node.elements) {\n    const node2 = walk({ node: el.value, scope });\n    node2 !== null && of.push(node2);\n  }\n  return {\n    type: \"array\",\n    of: {\n      type: \"union\",\n      of\n    }\n  };\n}\nfunction handleValueNode(node, scope) {\n  if (node.value === null)\n    return { type: \"null\" };\n  switch (typeof node.value) {\n    case \"string\":\n      return {\n        type: \"string\",\n        value: node.value\n      };\n    case \"number\":\n      return {\n        type: \"number\",\n        value: node.value\n      };\n    case \"boolean\":\n      return {\n        type: \"boolean\",\n        value: node.value\n      };\n    case \"object\":\n      return node.value === null ? { type: \"null\" } : Array.isArray(node.value) ? {\n        type: \"array\",\n        of: {\n          type: \"union\",\n          of: node.value.map((value) => walk({ node: { type: \"Value\", value }, scope }))\n        }\n      } : {\n        type: \"object\",\n        attributes: Object.fromEntries(\n          Object.entries(node.value).map(([key, value]) => [\n            key,\n            {\n              type: \"objectAttribute\",\n              value: walk({ node: { type: \"Value\", value }, scope })\n            }\n          ])\n        )\n      };\n    default:\n      return { type: \"unknown\" };\n  }\n}\nfunction handleSlice(node, scope) {\n  $trace(\"slice.node %O\", node);\n  const base = walk({ node: node.base, scope });\n  return mapArray(base, scope, (base2) => base2);\n}\nfunction handleParentNode({ n }, scope) {\n  $trace(\"handle.parent.currentScope %d %O\", n, scope);\n  let current = scope;\n  for (let i = 0; i < n; i++) {\n    for (; current != null && current.isHidden; )\n      current = current.parent;\n    current = current == null ? void 0 : current.parent;\n  }\n  return $trace(\"handle.parent.newScope %d %O\", n, current), current ? current.value.of.length === 0 ? { type: \"null\" } : current.value : { type: \"null\" };\n}\nfunction handleNotNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return mapNode(base, scope, (base2) => base2.type === \"unknown\" ? nullUnion({ type: \"boolean\" }) : base2.type === \"boolean\" ? base2.value !== void 0 ? { type: \"boolean\", value: base2.value === !1 } : { type: \"boolean\" } : { type: \"null\" });\n}\nfunction handleNegNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return mapNode(base, scope, (base2) => base2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : base2.type !== \"number\" ? { type: \"null\" } : base2.value !== void 0 ? { type: \"number\", value: -base2.value } : base2);\n}\nfunction handlePosNode(node, scope) {\n  const base = walk({ node: node.base, scope });\n  return mapNode(base, scope, (base2) => base2.type === \"unknown\" ? nullUnion({ type: \"number\" }) : base2.type !== \"number\" ? { type: \"null\" } : base2);\n}\nfunction handleEverythingNode(_, scope) {\n  return {\n    type: \"array\",\n    of: {\n      type: \"union\",\n      of: scope.context.schema.filter((obj) => obj.type === \"document\").map((doc) => ({\n        type: \"object\",\n        attributes: doc.attributes\n      }))\n    }\n  };\n}\nfunction handleAndNode(node, scope) {\n  const left = walk({ node: node.left, scope }), right = walk({ node: node.right, scope });\n  return mapNode(\n    left,\n    scope,\n    (lhs) => mapNode(right, scope, (rhs) => {\n      const value = booleanAnd(booleanValue(lhs, scope), booleanValue(rhs, scope));\n      return booleanInterpretationToTypeNode(value);\n    })\n  );\n}\nfunction handleOrNode(node, scope) {\n  const left = walk({ node: node.left, scope }), right = walk({ node: node.right, scope });\n  return mapNode(\n    left,\n    scope,\n    (lhs) => mapNode(right, scope, (rhs) => {\n      const value = booleanOr(booleanValue(lhs, scope), booleanValue(rhs, scope));\n      return booleanInterpretationToTypeNode(value);\n    })\n  );\n}\nconst OVERRIDE_TYPE_SYMBOL = Symbol(\"groq-js.type\");\nfunction walk({ node, scope }) {\n  if (OVERRIDE_TYPE_SYMBOL in node)\n    return node[OVERRIDE_TYPE_SYMBOL];\n  switch (node.type) {\n    case \"Map\":\n      return handleMap(node, scope);\n    case \"Projection\":\n      return handleProjectionNode(node, scope);\n    case \"Filter\":\n      return handleFilterNode(node, scope);\n    case \"AccessAttribute\":\n      return optimizeUnions(handleAccessAttributeNode(node, scope));\n    case \"AccessElement\":\n      return handleAccessElementNode(node, scope);\n    case \"ArrayCoerce\":\n      return handleArrayCoerceNode(node, scope);\n    case \"FlatMap\":\n      return handleFlatMap(node, scope);\n    case \"OpCall\":\n      return handleOpCallNode(node, scope);\n    case \"And\":\n      return handleAndNode(node, scope);\n    case \"Or\":\n      return handleOrNode(node, scope);\n    case \"Select\":\n      return handleSelectNode(node, scope);\n    case \"PipeFuncCall\":\n      return walk({ node: node.base, scope });\n    case \"Deref\":\n      return handleDerefNode(node, scope);\n    case \"Object\":\n      return handleObjectNode(node, scope);\n    case \"Value\":\n      return handleValueNode(node, scope);\n    case \"Array\":\n      return handleArrayNode(node, scope);\n    case \"Everything\":\n      return handleEverythingNode(node, scope);\n    case \"This\":\n      return $trace(\"this %O\", scope.value), scope.value;\n    case \"Parent\":\n      return handleParentNode(node, scope);\n    case \"FuncCall\":\n      return handleFuncCallNode(node, scope);\n    case \"Group\":\n      return walk({ node: node.base, scope });\n    case \"Not\":\n      return handleNotNode(node, scope);\n    case \"Parameter\":\n      return {\n        type: \"unknown\"\n      };\n    case \"Slice\":\n      return handleSlice(node, scope);\n    case \"Neg\":\n      return handleNegNode(node, scope);\n    case \"Pos\":\n      return handlePosNode(node, scope);\n    case \"Asc\":\n    case \"Desc\":\n    case \"Context\":\n    case \"Tuple\":\n    case \"Selector\":\n    case \"InRange\":\n      return { type: \"unknown\" };\n    default:\n      throw new Error(`unknown node type ${node.type}`);\n  }\n}\nfunction isPrimitiveTypeNode(node) {\n  return node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\";\n}\nfunction evaluateComparison(opcall, left, right) {\n  if (!(left.value === void 0 || right.value === void 0))\n    switch (opcall) {\n      case \"==\":\n        return left.value === right.value;\n      case \"<\":\n        return left.value < right.value;\n      case \"<=\":\n        return left.value <= right.value;\n      case \">\":\n        return left.value > right.value;\n      case \">=\":\n        return left.value >= right.value;\n      default:\n        throw new Error(`unknown comparison operator ${opcall}`);\n    }\n}\nfunction resolveFilter(expr, scope) {\n  $trace(\"resolveFilter.expr %O\", expr);\n  const filtered = scope.value.of.filter((node) => {\n    const subScope = scope.createHidden([node]), cond = walk({ node: expr, scope: subScope });\n    return booleanValue(cond, subScope).canBeTrue;\n  });\n  return $trace(\n    `resolveFilter ${expr.type === \"OpCall\" ? `${expr.type}/${expr.op}` : expr.type} %O`,\n    filtered\n  ), { type: \"union\", of: filtered };\n}\nfunction mapArray(node, scope, mapper) {\n  return mapNode(node, scope, (base) => base.type === \"unknown\" ? base : base.type === \"array\" ? mapper(base) : { type: \"null\" });\n}\nfunction mapObject(node, scope, mapper) {\n  return mapNode(node, scope, (base) => base.type === \"unknown\" ? base : base.type === \"object\" ? mapper(base) : { type: \"null\" });\n}\n\n//# sourceMappingURL=1.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/groq-js/dist/1.mjs\n");

/***/ })

};
;